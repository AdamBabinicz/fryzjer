import React, { useRef, useEffect, useCallback } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Switch, Route, useLocation, Link } from "wouter";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import Home from "@/pages/Home";
import About from "@/pages/About";
import Services from "@/pages/Services";
import Gallery from "@/pages/Gallery";
import Contact from "@/pages/Contact";
import PrivacyPolicy from "@/pages/PrivacyPolicy";
import Terms from "@/pages/Terms";
import NotFound from "@/pages/not-found";
import GalleryModal from "@/components/GalleryModal";
import ServiceModal from "@/components/ServiceModal";
import { useLanguage } from "@/context/LanguageContext";
import { ServiceProvider } from "@/context/ServiceContext";
import ScrollToTop from "@/components/ScrollToTop";
import { HelmetProvider } from "react-helmet-async";
import { SchemaOrg } from "./components/SchemaOrg";

function App() {
  const { t } = useTranslation();
  const { language } = useLanguage();
  const [location] = useLocation();

  const homeRef = useRef<HTMLDivElement>(null);
  const aboutRef = useRef<HTMLDivElement>(null);
  const servicesRef = useRef<HTMLDivElement>(null);
  const galleryRef = useRef<HTMLDivElement>(null);
  const contactRef = useRef<HTMLDivElement>(null);

  const refIdMap = useCallback(
    () =>
      new Map<React.RefObject<HTMLDivElement>, string>([
        [homeRef, ""],
        [aboutRef, "about"],
        [servicesRef, "services"],
        [galleryRef, "gallery"],
        [contactRef, "contact"],
      ]),
    []
  );

  const scrollToSection = useCallback(
    (
      ref: React.RefObject<HTMLDivElement>,
      behavior: ScrollBehavior = "smooth"
    ) => {
      const currentRefIdMap = refIdMap();
      const targetId = currentRefIdMap.get(ref);
      if (ref === homeRef) {
        console.log(`Scrolling to TOP (Home)`);
        window.scrollTo({ top: 0, behavior });
        if (location === "/") {
          console.log("Replacing state, removing hash for home");
          history.replaceState(null, "", window.location.pathname);
        }
      } else if (ref?.current) {
        const offset = 80;
        const topPos = ref.current.offsetTop - offset;

        console.log(
          `Scrolling to ref for ID ${targetId ?? "unknown"} at top: ${topPos}`
        );
        window.scrollTo({ top: topPos, behavior });

        if (location === "/") {
          if (targetId !== undefined && targetId !== "") {
            console.log(`Replacing state with hash: #${targetId}`);
            history.replaceState(null, "", `#${targetId}`);
          }
        }
      } else {
        console.warn("Scroll target ref is not available for ID:", targetId);
      }
    },
    [location, refIdMap]
  );

  useEffect(() => {
    const currentPath = location;
    const hash = window.location.hash;
    const currentRefIdMap = refIdMap();

    console.log(`Effect: Location=${currentPath}, Hash=${hash}`);

    if (currentPath === "/" && hash) {
      const timer = setTimeout(() => {
        const id = hash.substring(1);
        console.log(`Effect: Processing initial hash: ${id}`);

        let targetRef: React.RefObject<HTMLDivElement> | null = null;
        currentRefIdMap.forEach((refId, ref) => {
          if (refId === id) targetRef = ref;
        });

        if (
          !targetRef &&
          (id === "services-haircut" ||
            id === "services-styling" ||
            id === "services-coloring")
        ) {
          targetRef = servicesRef;
        }

        if (targetRef) {
          scrollToSection(targetRef, "auto");
        } else {
          const element = document.getElementById(id);
          if (element) {
            console.log(`Effect Fallback: Scrolling to element ID: ${id}`);
            window.scrollTo({ top: element.offsetTop - 80, behavior: "auto" });
          } else {
            console.warn(
              `Effect: Element/Ref for initial hash ${id} not found.`
            );
          }
        }
      }, 150);

      return () => clearTimeout(timer);
    }
  }, [location, scrollToSection, refIdMap]);

  const MainContent = () => (
    <>
      <Home ref={homeRef} onContactClick={() => scrollToSection(contactRef)} />
      <About ref={aboutRef} />
      <Services ref={servicesRef} />
      <Gallery ref={galleryRef} />
      <Contact ref={contactRef} />
    </>
  );

  return (
    <ServiceProvider>
      <HelmetProvider>
        <Helmet>
          <html lang={language} />
          <title>{t("meta.title")}</title>{" "}
        </Helmet>
        <SchemaOrg />
        <a
          href="#main-content"
          className="sr-only focus:not-sr-only focus:absolute focus:p-4 focus:bg-accent focus:text-white focus:z-50"
        ></a>

        <Navbar
          onHomeClick={() => scrollToSection(homeRef)}
          onAboutClick={() => scrollToSection(aboutRef)}
          onServicesClick={() => scrollToSection(servicesRef)}
          onGalleryClick={() => scrollToSection(galleryRef)}
          onContactClick={() => scrollToSection(contactRef)}
        />

        <main id="main-content">
          <Switch>
            <Route path="/" component={MainContent} />
            <Route path="/privacy-policy" component={PrivacyPolicy} />
            <Route path="/terms" component={Terms} />
            <Route component={NotFound} />
          </Switch>
        </main>

        <Footer
          onHomeClick={() => scrollToSection(homeRef)}
          onAboutClick={() => scrollToSection(aboutRef)}
          onServicesClick={() => scrollToSection(servicesRef)}
          onGalleryClick={() => scrollToSection(galleryRef)}
          onContactClick={() => scrollToSection(contactRef)}
        />

        <GalleryModal />
        <ServiceModal />
        <ScrollToTop />
        {/* Ten komponent działa poprawnie, bo używa top: 0 */}
      </HelmetProvider>
    </ServiceProvider>
  );
}

export default App;


----------------------------

import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { cn } from "@/lib/utils";
import LanguageSelector from "./LanguageSelector";
import ThemeToggle from "./ThemeToggle";
import { FaBars, FaChevronDown } from "react-icons/fa";
import { useLanguage } from "@/context/LanguageContext";
import { useTheme } from "@/context/ThemeContext";
import { useLocation, Link } from "wouter";

interface NavbarProps {
  onHomeClick: () => void;
  onAboutClick: () => void;
  onServicesClick: () => void;
  onGalleryClick: () => void;
  onContactClick: () => void;
}

const Navbar = ({
  onHomeClick,
  onAboutClick,
  onServicesClick,
  onGalleryClick,
  onContactClick,
}: NavbarProps) => {
  const { t } = useTranslation();
  const { language } = useLanguage();
  const { theme } = useTheme();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isServicesDropdownOpen, setIsServicesDropdownOpen] = useState(false);
  const [location] = useLocation();
  const isHomePage = location === "/";

  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
    setIsServicesDropdownOpen(false);
  };

  useEffect(() => {
    closeMobileMenu();
  }, [language, theme, location]);
  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 10);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const navLinkBaseClasses =
    "text-primary dark:text-[#d6f4ff] hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out";
  const mobileNavLinkBaseClasses =
    "block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md";
  const flexAlignCenterClasses = "flex items-center";

  const handleMobileLinkClick = (scrollFunc: () => void) => {
    scrollFunc();
    closeMobileMenu();
  };
  // Specjalna obsługa dla kliknięcia w 'Usługi' na home (rozwija/zwija lub przewija)
  const handleMobileServicesClick = () => {
    if (isServicesDropdownOpen) {
      onServicesClick(); // Przewiń do sekcji jeśli dropdown był otwarty
      closeMobileMenu();
    } else {
      setIsServicesDropdownOpen(true); // Otwórz dropdown jeśli był zamknięty
    }
  };
  // Obsługa kliknięcia w podkategorię usługi
  const handleMobileSubServiceClick = (scrollFunc: () => void) => {
    scrollFunc(); // Wywołaj dedykowaną funkcję przewijania (jeśli masz) lub onServicesClick
    closeMobileMenu();
  };

  return (
    <header
      className={cn(
        "fixed top-0 left-0 right-0 z-50 transition duration-500 ease-in-out",
        isScrolled
          ? "bg-white dark:bg-[#121e33] shadow-md"
          : "bg-white/90 dark:bg-[#121e33]/90"
      )}
    >
      <nav className="max-w-[1400px] mx-auto px-4 sm:px-6 md:px-8 py-4 flex items-center justify-between">
        {/* Logo */}
        <div className="flex items-center">
          {isHomePage ? (
            <button onClick={onHomeClick} className={flexAlignCenterClasses}>
              <img
                src={
                  theme === "dark"
                    ? "/attached_assets/g-j.avif"
                    : "/attached_assets/g.avif"
                }
                alt="Logo"
                className="h-8 mr-2"
              />
              <span className="text-2xl font-bold playfair tracking-wider flex items-center text-primary dark:text-[#d6f4ff]">
                <img
                  src={
                    theme === "dark"
                      ? "/attached_assets/a-j.avif"
                      : "/attached_assets/a.avif"
                  }
                  alt="A"
                  className="h-7 inline"
                />
                GILERA
              </span>
            </button>
          ) : (
            <Link href="/" className={flexAlignCenterClasses}>
              <img
                src={
                  theme === "dark"
                    ? "/attached_assets/g-j.avif"
                    : "/attached_assets/g.avif"
                }
                alt="Logo"
                className="h-8 mr-2"
              />
              <span className="text-2xl font-bold playfair tracking-wider flex items-center text-primary dark:text-[#d6f4ff]">
                <img
                  src={
                    theme === "dark"
                      ? "/attached_assets/a-j.avif"
                      : "/attached_assets/a.avif"
                  }
                  alt="A"
                  className="h-7 inline"
                />
                GILERA
              </span>
            </Link>
          )}
        </div>
        {/* Mobile Toggle */}
        <button
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          className="md:hidden flex items-center text-primary dark:text-[#d6f4ff]"
          aria-label={t("accessibility.toggleMenu")}
        >
          {" "}
          <FaBars className="text-xl" />
        </button>
        {/* Desktop Nav */}
        <div className="hidden md:flex items-center space-x-8">
          {isHomePage ? (
            <button onClick={onHomeClick} className={navLinkBaseClasses}>
              {t("nav.home")}
            </button>
          ) : (
            <Link href="/" className={navLinkBaseClasses}>
              {t("nav.home")}
            </Link>
          )}
          {isHomePage ? (
            <button onClick={onAboutClick} className={navLinkBaseClasses}>
              {t("nav.about")}
            </button>
          ) : (
            <Link href="/#about" className={navLinkBaseClasses}>
              {t("nav.about")}
            </Link>
          )}
          <div className="relative">
            {" "}
            {isHomePage ? (
              <button
                onClick={onServicesClick}
                className={cn(navLinkBaseClasses, flexAlignCenterClasses)}
              >
                {t("nav.services")}
              </button>
            ) : (
              <Link
                href="/#services"
                className={cn(navLinkBaseClasses, flexAlignCenterClasses)}
              >
                {t("nav.services")}
              </Link>
            )}
          </div>
          {isHomePage ? (
            <button onClick={onGalleryClick} className={navLinkBaseClasses}>
              {t("nav.gallery")}
            </button>
          ) : (
            <Link href="/#gallery" className={navLinkBaseClasses}>
              {t("nav.gallery")}
            </Link>
          )}
          {isHomePage ? (
            <button onClick={onContactClick} className={navLinkBaseClasses}>
              {t("nav.contact")}
            </button>
          ) : (
            <Link href="/#contact" className={navLinkBaseClasses}>
              {t("nav.contact")}
            </Link>
          )}
        </div>
        {/* Desktop Toggles */}
        <div className="hidden md:flex items-center space-x-4">
          <LanguageSelector />
          <ThemeToggle />
        </div>
      </nav>
      {/* Mobile Menu */}
      <div
        className={cn(
          "md:hidden overflow-hidden transition-all duration-500 ease-in-out",
          isMobileMenuOpen ? "max-h-screen opacity-100" : "max-h-0 opacity-0"
        )}
        style={{ pointerEvents: isMobileMenuOpen ? "auto" : "none" }}
      >
        <div className="px-2 pt-2 pb-20 space-y-1 bg-white dark:bg-[#253754] shadow-md">
          {/* Mobile Links */}
          {isHomePage ? (
            <button
              onClick={() => handleMobileLinkClick(onHomeClick)}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.home")}
            </button>
          ) : (
            <Link
              href="/"
              onClick={closeMobileMenu}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.home")}
            </Link>
          )}
          {isHomePage ? (
            <button
              onClick={() => handleMobileLinkClick(onAboutClick)}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.about")}
            </button>
          ) : (
            <Link
              href="/#about"
              onClick={closeMobileMenu}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.about")}
            </Link>
          )}

          {/* --- Mobile Services Section --- */}
          {isHomePage ? (
            // Na home page, ten przycisk rozwija/zwija dropdown LUB przewija do sekcji #services
            <button
              onClick={handleMobileServicesClick}
              className="flex justify-between items-center w-full px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
            >
              {t("nav.services")}
              <FaChevronDown
                className={cn(
                  "text-xs transition-transform duration-300",
                  isServicesDropdownOpen ? "rotate-180" : "rotate-0"
                )}
              />
            </button>
          ) : (
            // Na podstronie, ten przycisk jest linkiem do #services
            <Link
              href="/#services"
              onClick={closeMobileMenu}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.services")}
            </Link>
          )}

          {/* Dropdown - tylko na home page */}
          {isHomePage && (
            <div
              className={cn(
                "overflow-hidden transition-all duration-300 ease-in-out pl-4",
                isServicesDropdownOpen
                  ? "max-h-[200px] opacity-100"
                  : "max-h-0 opacity-0"
              )}
            >
              {/* Zakładam, że masz funkcje do przewijania do podsekcji, np. onHaircutClick, lub używasz ogólnej onServicesClick */}
              <button
                onClick={() =>
                  handleMobileSubServiceClick(
                    onServicesClick /* lub onHaircutClick */
                  )
                }
                className={mobileNavLinkBaseClasses}
              >
                {t("services.haircut")}
              </button>
              <button
                onClick={() =>
                  handleMobileSubServiceClick(
                    onServicesClick /* lub onStylingClick */
                  )
                }
                className={mobileNavLinkBaseClasses}
              >
                {t("services.styling")}
              </button>
              <button
                onClick={() =>
                  handleMobileSubServiceClick(
                    onServicesClick /* lub onColoringClick */
                  )
                }
                className={mobileNavLinkBaseClasses}
              >
                {t("services.coloring")}
              </button>
            </div>
          )}
          {/* --- End Mobile Services Section --- */}

          {isHomePage ? (
            <button
              onClick={() => handleMobileLinkClick(onGalleryClick)}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.gallery")}
            </button>
          ) : (
            <Link
              href="/#gallery"
              onClick={closeMobileMenu}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.gallery")}
            </Link>
          )}
          {isHomePage ? (
            <button
              onClick={() => handleMobileLinkClick(onContactClick)}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.contact")}
            </button>
          ) : (
            <Link
              href="/#contact"
              onClick={closeMobileMenu}
              className={mobileNavLinkBaseClasses}
            >
              {t("nav.contact")}
            </Link>
          )}

          {/* Mobile Toggles */}
          <div className="flex items-center justify-between px-3 pt-4">
            <div className="flex-1">
              <LanguageSelector isMobile={true} />
            </div>
            <ThemeToggle isMobile={true} />
          </div>
        </div>
      </div>
    </header>
  );
};

export default Navbar;
