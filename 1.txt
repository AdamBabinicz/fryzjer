import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { cn } from '@/lib/utils';
import LanguageSelector from './LanguageSelector';
import ThemeToggle from './ThemeToggle';
import { FaBars, FaChevronDown } from 'react-icons/fa';
import { useTheme } from '@/context/ThemeContext';

interface NavbarProps {
  onHomeClick: () => void;
  onAboutClick: () => void;
  onServicesClick: () => void;
  onGalleryClick: () => void;
  onContactClick: () => void;
}

const Navbar = ({
  onHomeClick,
  onAboutClick,
  onServicesClick,
  onGalleryClick,
  onContactClick
}: NavbarProps) => {
  const { t } = useTranslation();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isServicesDropdownOpen, setIsServicesDropdownOpen] = useState(false);
  
  // Handle scrolling effect
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  // Close mobile menu when clicking a link
  const handleLinkClick = (callback: () => void) => {
    callback();
    setIsMobileMenuOpen(false);
  };
  
  // Scroll to specific section within Services
  const scrollToServiceSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      window.scrollTo({
        top: element.offsetTop - 100, // Adjust for header height
        behavior: 'smooth',
      });
    }
    
    setIsMobileMenuOpen(false);
  };
  
  const { theme } = useTheme();
  
  return (
    <header className={cn(
      "fixed top-0 left-0 right-0 z-50 transition duration-300 ease-in-out",
      isScrolled 
        ? "bg-white dark:bg-[#121e33] shadow-md" 
        : "bg-white/90 dark:bg-[#121e33]/90"
    )}>
      <nav className="max-w-[1400px] mx-auto px-4 sm:px-6 md:px-8 py-4 flex items-center justify-between">
        {/* Logo */}
        <div className="flex items-center">
          <button onClick={onHomeClick} className="flex items-center">
            <img 
              src={theme === 'dark' ? '/attached_assets/g-j.png' : '/attached_assets/g.png'} 
              alt="Agilera Salon Logo" 
              className="h-8 mr-2" 
            />
            <span className="text-2xl font-bold playfair tracking-wider flex items-center">
              <img 
                src={theme === 'dark' ? '/attached_assets/a-j.png' : '/attached_assets/a.png'} 
                alt="A letter" 
                className="h-7 inline" 
              />
              GILERA
            </span>
          </button>
        </div>
        
        {/* Mobile menu button */}
        <button 
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          className="md:hidden flex items-center text-primary dark:text-white"
          aria-label={t('accessibility.toggleMenu')}
        >
          <FaBars className="text-xl" />
        </button>
        
        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-8">
          <button 
            onClick={onHomeClick}
            className="text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
          >
            {t('nav.home')}
          </button>
          
          <button 
            onClick={onAboutClick}
            className="text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
          >
            {t('nav.about')}
          </button>
          
          <div className="relative">
            <button 
              onClick={onServicesClick}
              className="flex items-center text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
            >
              {t('nav.services')}
            </button>
          </div>
          
          <button 
            onClick={onGalleryClick}
            className="text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
          >
            {t('nav.gallery')}
          </button>
          
          <button 
            onClick={onContactClick}
            className="text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
          >
            {t('nav.contact')}
          </button>
        </div>
        
        <div className="hidden md:flex items-center space-x-4">
          <LanguageSelector />
          <ThemeToggle />
        </div>
      </nav>
      
      {/* Mobile Navigation */}
      <div className={`md:hidden ${isMobileMenuOpen ? 'block' : 'hidden'}`}>
        <div className="px-2 pt-2 pb-3 space-y-1 bg-white dark:bg-[#253754] shadow-md">
          <button 
            onClick={() => handleLinkClick(onHomeClick)}
            className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
          >
            {t('nav.home')}
          </button>
          
          <button 
            onClick={() => handleLinkClick(onAboutClick)}
            className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
          >
            {t('nav.about')}
          </button>
          
          <button 
            onClick={() => setIsServicesDropdownOpen(!isServicesDropdownOpen)}
            className="flex justify-between items-center w-full px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
          >
            {t('nav.services')} <FaChevronDown className="text-xs" />
          </button>
          
          <div className={`pl-4 ${isServicesDropdownOpen ? 'block' : 'hidden'}`}>
            <button 
              onClick={() => scrollToServiceSection('services-haircut')}
              className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
            >
              {t('services.haircut')}
            </button>
            <button 
              onClick={() => scrollToServiceSection('services-styling')}
              className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
            >
              {t('services.styling')}
            </button>
            <button 
              onClick={() => scrollToServiceSection('services-coloring')}
              className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
            >
              {t('services.coloring')}
            </button>
          </div>
          
          <button 
            onClick={() => handleLinkClick(onGalleryClick)}
            className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
          >
            {t('nav.gallery')}
          </button>
          
          <button 
            onClick={() => handleLinkClick(onContactClick)}
            className="block w-full text-left px-3 py-2 text-primary dark:text-white hover:bg-neutral dark:hover:bg-gray-700 rounded-md"
          >
            {t('nav.contact')}
          </button>
          
          <div className="flex items-center justify-between px-3 py-2">
            <LanguageSelector isMobile={true} />
            <ThemeToggle isMobile={true} />
          </div>
        </div>
      </div>
    </header>
  );
};

export default Navbar;

-------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 220 30% 15%;  /* #1c2a42 - lighter navy blue */
    --foreground: 0 0% 100%;
    --muted: 220 25% 20%;       /* #253754 */
    --muted-foreground: 240 5% 64.9%;
    --popover: 220 30% 15%;
    --popover-foreground: 0 0% 100%;
    --card: 220 25% 20%;        /* #253754 */
    --card-foreground: 0 0% 100%;
    --border: 220 20% 25%;
    --input: 220 20% 25%;
    --primary: 0 0% 100%;       /* #ffffff */
    --primary-foreground: 220 30% 15%;
    --secondary: 220 30% 15%;   /* #1c2a42 */
    --secondary-foreground: 0 0% 100%;
    --accent: 36 77% 55%;       /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 240 4.9% 83.9%;
  }
  
  /* Add pronounced gradients to dark mode sections */
  .dark body {
    background: linear-gradient(135deg, hsl(220, 40%, 18%) 0%, hsl(225, 40%, 12%) 100%);
  }
  
  /* Different background gradients for each section */
  .dark .section-home {
    background: linear-gradient(145deg, hsl(220, 40%, 18%) 0%, hsl(225, 45%, 12%) 100%);
  }
  
  .dark .section-about {
    background: linear-gradient(145deg, hsl(212, 45%, 20%) 0%, hsl(220, 40%, 14%) 100%);
  }
  
  .dark .section-services {
    background: linear-gradient(145deg, hsl(225, 45%, 22%) 0%, hsl(220, 40%, 16%) 100%);
  }
  
  .dark .section-gallery {
    background: linear-gradient(145deg, hsl(228, 45%, 20%) 0%, hsl(225, 40%, 14%) 100%);
  }
  
  .dark .section-contact {
    background: linear-gradient(145deg, hsl(215, 40%, 22%) 0%, hsl(220, 45%, 16%) 100%);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: 'Inter', sans-serif;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Playfair Display', serif;
  }

  .playfair {
    font-family: 'Playfair Display', serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}

----------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 97%; /* zamiast 100% → delikatnie szare tło */
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 220 30% 15%; /* #1c2a42 - lighter navy blue */
    --foreground: 0 0% 100%;
    --muted: 220 25% 20%; /* #253754 */
    --muted-foreground: 240 5% 64.9%;
    --popover: 220 30% 15%;
    --popover-foreground: 0 0% 100%;
    --card: 220 25% 20%; /* #253754 */
    --card-foreground: 0 0% 100%;
    --border: 220 20% 25%;
    --input: 220 20% 25%;
    --primary: 0 0% 100%; /* #ffffff */
    --primary-foreground: 220 30% 15%;
    --secondary: 220 30% 15%; /* #1c2a42 */
    --secondary-foreground: 0 0% 100%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 240 4.9% 83.9%;
  }

  /* Add pronounced gradients to dark mode sections */
  .dark body {
    background: linear-gradient(
      135deg,
      hsl(220, 40%, 18%) 0%,
      hsl(225, 40%, 12%) 100%
    );
  }

  .dark .section-home {
    background: linear-gradient(
      145deg,
      hsl(220, 40%, 18%) 0%,
      hsl(225, 45%, 12%) 100%
    );
  }

  .dark .section-about {
    background: linear-gradient(
      145deg,
      hsl(212, 45%, 20%) 0%,
      hsl(220, 40%, 14%) 100%
    );
  }

  .dark .section-services {
    background: linear-gradient(
      145deg,
      hsl(225, 45%, 22%) 0%,
      hsl(220, 40%, 16%) 100%
    );
  }

  .dark .section-gallery {
    background: linear-gradient(
      145deg,
      hsl(228, 45%, 20%) 0%,
      hsl(225, 40%, 14%) 100%
    );
  }

  .dark .section-contact {
    background: linear-gradient(
      145deg,
      hsl(215, 40%, 22%) 0%,
      hsl(220, 45%, 16%) 100%
    );
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: "Inter", sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }

  .playfair {
    font-family: "Playfair Display", serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}


---------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 97%; /* zamiast 100% → delikatnie szare tło */
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 220 30% 15%; /* #1c2a42 - lighter navy blue */
    --foreground: 0 0% 100%;
    --muted: 220 25% 20%; /* #253754 */
    --muted-foreground: 240 5% 64.9%;
    --popover: 220 30% 15%;
    --popover-foreground: 0 0% 100%;
    --card: 220 25% 20%; /* #253754 */
    --card-foreground: 0 0% 100%;
    --border: 220 20% 25%;
    --input: 220 20% 25%;
    --primary: 0 0% 100%; /* #ffffff */
    --primary-foreground: 220 30% 15%;
    --secondary: 220 30% 15%; /* #1c2a42 */
    --secondary-foreground: 0 0% 100%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 240 4.9% 83.9%;
  }

  /* Add pronounced gradients to dark mode sections */
  .dark body {
    background: linear-gradient(
      135deg,
      hsl(220, 40%, 18%) 0%,
      hsl(225, 40%, 12%) 100%
    );
  }

  .dark .section-home {
    background: linear-gradient(
      145deg,
      hsl(220, 40%, 18%) 0%,
      hsl(225, 45%, 12%) 100%
    );
  }

  .dark .section-about {
    background: linear-gradient(
      145deg,
      hsl(212, 45%, 20%) 0%,
      hsl(220, 40%, 14%) 100%
    );
  }

  .dark .section-services {
    background: linear-gradient(
      145deg,
      hsl(225, 45%, 22%) 0%,
      hsl(220, 40%, 16%) 100%
    );
  }

  .dark .section-gallery {
    background: linear-gradient(
      145deg,
      hsl(228, 45%, 20%) 0%,
      hsl(225, 40%, 14%) 100%
    );
  }

  .dark .section-contact {
    background: linear-gradient(
      145deg,
      hsl(215, 40%, 22%) 0%,
      hsl(220, 45%, 16%) 100%
    );
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: "Inter", sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }

  .playfair {
    font-family: "Playfair Display", serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}


----------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 97%; /* zamiast 100% → delikatnie szare tło */
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: hsl(0, 0%, 12%); /* ciemny szary-beżowy */
    --foreground: hsl(0, 0%, 98%); /* jasny kremowy */
    --muted: hsl(0, 0%, 15%); /* ciemny beż */
    --muted-foreground: hsl(0, 0%, 90%); /* jasny beż */
    --popover: hsl(0, 0%, 100%); /* biały */
    --popover-foreground: hsl(0, 0%, 10%); /* ciemny szary */
    --card: hsl(0, 0%, 15%); /* ciemny szary-beżowy */
    --card-foreground: hsl(0, 0%, 90%); /* jasny beż */
    --border: hsl(0, 0%, 20%); /* bardzo ciemny szary */
    --input: hsl(0, 0%, 20%); /* ciemny szary */
    --primary: hsl(0, 0%, 98%); /* jasny kremowy */
    --primary-foreground: hsl(0, 0%, 10%); /* ciemny szary */
    --secondary: hsl(0, 0%, 95%); /* bardzo jasny beż */
    --secondary-foreground: hsl(0, 0%, 10%); /* ciemny szary */
    --accent: hsl(36, 77%, 55%); /* ciepły złoty */
    --accent-foreground: hsl(0, 0%, 100%); /* biały */
    --destructive: hsl(0, 60%, 40%); /* ciepły czerwony */
    --destructive-foreground: hsl(0, 0%, 98%); /* jasny kremowy */
    --ring: hsl(0, 0%, 50%); /* średni szary */
  }

  /* Removing gradients, using solid colors for dark mode sections */
  .dark body {
    background-color: hsl(0, 0%, 12%); /* ciemny szary-beżowy */
  }

  .dark .section-home {
    background-color: hsl(0, 0%, 15%); /* ciemny szary-beżowy */
  }

  .dark .section-about {
    background-color: hsl(36, 77%, 55%); /* ciepły złoty */
  }

  .dark .section-services {
    background-color: hsl(36, 77%, 60%); /* ciepły złoty */
  }

  .dark .section-gallery {
    background-color: hsl(36, 77%, 65%); /* ciepły złoty */
  }

  .dark .section-contact {
    background-color: hsl(36, 77%, 70%); /* ciepły złoty */
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: "Inter", sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }

  .playfair {
    font-family: "Playfair Display", serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}

------------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 220 30% 15%; /* #1c2a42 - lighter navy blue */
    --foreground: 0 0% 100%;
    --muted: 220 25% 20%; /* #253754 */
    --muted-foreground: 240 5% 64.9%;
    --popover: 220 30% 15%;
    --popover-foreground: 0 0% 100%;
    --card: 220 25% 20%; /* #253754 */
    --card-foreground: 0 0% 100%;
    --border: 220 20% 25%;
    --input: 220 20% 25%;
    --primary: 0 0% 100%; /* #ffffff */
    --primary-foreground: 220 30% 15%;
    --secondary: 220 30% 15%; /* #1c2a42 */
    --secondary-foreground: 0 0% 100%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 240 4.9% 83.9%;
  }

  /* Dark mode sections with solid colors */
  .dark body {
    background: hsl(220, 30%, 15%);
  }

  .dark .section-home,
  .dark .section-about,
  .dark .section-services,
  .dark .section-gallery,
  .dark .section-contact {
    background: hsl(220, 30%, 15%);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: "Inter", sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }

  .playfair {
    font-family: "Playfair Display", serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}


niezłe tło
----------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 10.2%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 10.2%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 10.2%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --primary: 0 0% 10.2%; /* #1a1a1a */
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 100%; /* #ffffff */
    --secondary-foreground: 0 0% 10.2%;
    --accent: 36 77% 55%; /* #c4a15a */
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --ring: 0 0% 10.2%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 33 25% 20%; /* Modified to a warmer brown */
    --foreground: 45 80% 75%; /* Jasny złoty */
    --muted: 35 25% 25%; /* Ciemniejszy brąz */
    --muted-foreground: 45 70% 75%; /* Jasny złoty */
    --popover: 30 25% 20%;
    --popover-foreground: 45 80% 75%; /* Jasny złoty */
    --card: 35 30% 25%; /* Ciepły brąz dla kart */
    --card-foreground: 45 80% 75%; /* Jasny złoty */
    --border: 35 25% 30%;
    --input: 35 25% 30%;
    --primary: 45 80% 75%; /* Jasny złoty */
    --primary-foreground: 30 25% 20%;
    --secondary: 35 30% 25%; /* Ciepły brąz */
    --secondary-foreground: 45 80% 75%; /* Jasny złoty */
    --accent: 36 77% 55%; /* Złoty akcent */
    --accent-foreground: 45 80% 75%; /* Jasny złoty */
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 45 80% 75%; /* Jasny złoty */
    --ring: 35 25% 30%;
  }

  /* Dark mode sections with lighter alternating colors */
  .dark body {
    background: hsl(33, 25%, 25%); /* Modified to a warmer brown */
  }

  .dark header {
    background: hsl(
      35,
      30%,
      18%
    ) !important; /* Ciemniejszy brąz dla nawigacji */
  }

  .dark footer {
    background: hsl(32, 28%, 18%) !important; /* Ciemniejszy brąz dla stopki */
  }

  .dark .section-home {
    background: hsl(33, 25%, 25%); /* Modified to a warmer brown */
  }

  .dark .section-about {
    background: hsl(35, 35%, 30%); /* Jaśniejsze złoto */
  }

  .dark .section-services {
    background: hsl(33, 25%, 25%); /* Modified to a warmer brown */
  }

  .dark .section-gallery {
    background: hsl(40, 35%, 30%); /* Jaśniejszy bursztyn */
  }

  .dark .section-contact {
    background: hsl(33, 25%, 25%); /* Modified to a warmer brown */
  }

  /* Form styling in dark mode */
  .dark input,
  .dark textarea,
  .dark div[class*="bg-[#253754]"] {
    background: hsl(
      35,
      25%,
      18%
    ) !important; /* Ciemniejszy brąz dla pól formularza */
    border-color: hsl(35, 25%, 25%) !important;
  }

  /* Fixing blue elements in contact section */
  .dark .section-contact button,
  .dark .section-contact a {
    background-color: hsl(35, 30%, 18%) !important;
    color: hsl(0, 0%, 100%) !important;
  }

  .dark .section-contact button:hover,
  .dark .section-contact a:hover {
    background-color: hsl(35, 30%, 25%) !important;
  }

  /* Override for specific background elements */
  .dark .dark\:bg-\[\#1e1e1e\],
  .dark [class*="dark:bg-[#1e1e1e]"] {
    background-color: hsl(35, 25%, 18%) !important;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground;
    font-family: "Inter", sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }

  .playfair {
    font-family: "Playfair Display", serif;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Transition for hover effects */
  .custom-transition {
    @apply transition duration-300 ease-in-out;
  }
}


-----------------------------

import { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { motion, AnimatePresence } from 'framer-motion';
import { FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import { useGalleryModal } from '@/context/GalleryContext';
import { galleryData } from '@/data/galleryData';

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const sliderRef = useRef<HTMLDivElement>(null);
  
  const totalSlides = galleryData.length;

  // Auto slide functionality
  useEffect(() => {
    const interval = setInterval(() => {
      goToNextSlide();
    }, 5000);
    
    return () => clearInterval(interval);
  }, [currentSlide]);
  
  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = totalSlides - 1;
    if (newIndex >= totalSlides) newIndex = 0;
    
    setCurrentSlide(newIndex);
  };
  
  const goToPrevSlide = () => {
    goToSlide(currentSlide - 1);
  };
  
  const goToNextSlide = () => {
    goToSlide(currentSlide + 1);
  };
  
  // Touch handlers for mobile swiping
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };
  
  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };
  
  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      // Swipe left
      goToNextSlide();
    }
    
    if (touchStart - touchEnd < -50) {
      // Swipe right
      goToPrevSlide();
    }
  };
  
  // Handle image click to open modal
  const handleImageClick = (slide: number, imageIndex: number) => {
    const gallerySlide = galleryData[slide];
    if (gallerySlide) {
      const imageData = gallerySlide.images[imageIndex];
      if (imageData) {
        openGalleryModal(imageData.fullSrc, imageData.alt);
      }
    }
  };
  
  return (
    <div className="relative">
      <div 
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait">
          <motion.div
            key={currentSlide}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {galleryData[currentSlide]?.images.map((image, index) => (
                <div 
                  key={`image-${index}`}
                  className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
                  onClick={() => handleImageClick(currentSlide, index)}
                >
                  <img 
                    src={image.src} 
                    alt={image.alt} 
                    className="w-full h-64 object-cover transition duration-300 ease-in-out hover:scale-105"
                    loading="lazy"
                  />
                </div>
              ))}
            </div>
          </motion.div>
        </AnimatePresence>
      </div>
      
      <button 
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t('accessibility.previousSlide')}
      >
        <FaChevronLeft />
      </button>
      
      <button 
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t('accessibility.nextSlide')}
      >
        <FaChevronRight />
      </button>
      
      <div className="flex justify-center mt-6 gap-2">
        {Array.from({ length: totalSlides }).map((_, index) => (
          <button 
            key={`dot-${index}`}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentSlide === index 
                ? 'bg-accent' 
                : 'bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent'
            }`}
            aria-label={t('accessibility.goToSlide', { number: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default GallerySlider;


-------------------------------

import { useState, useEffect, useRef } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);

  const totalSlides = galleryData.length;

  // Auto slide functionality
  useEffect(() => {
    const interval = setInterval(() => {
      goToNextSlide();
    }, 5000);

    return () => clearInterval(interval);
  }, [currentSlide]);

  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = totalSlides - 1;
    if (newIndex >= totalSlides) newIndex = 0;

    setCurrentSlide(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    goToSlide(currentSlide - 1);
  };

  const goToNextSlide = () => {
    setDirection("next");
    goToSlide(currentSlide + 1);
  };

  // Touch handlers for mobile swiping
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      // Swipe left
      goToPrevSlide();
    }

    if (touchStart - touchEnd < -50) {
      // Swipe right
      goToNextSlide();
    }
  };

  // Handle image click to open modal
  const handleImageClick = (slide: number, imageIndex: number) => {
    const gallerySlide = galleryData[slide];
    if (gallerySlide) {
      const imageData = gallerySlide.images[imageIndex];
      if (imageData) {
        openGalleryModal(imageData.fullSrc, imageData.alt);
      }
    }
  };

  return (
    <div className="relative">
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait">
          <motion.div
            key={currentSlide}
            initial={{
              opacity: 0,
              x: direction === "next" ? -100 : 100,
            }}
            animate={{ opacity: 1, x: 0 }}
            exit={{
              opacity: 0,
              x: direction === "next" ? 100 : -100,
            }}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {galleryData[currentSlide]?.images.map((image, index) => (
                <div
                  key={`image-${index}`}
                  className={`gallery-item cursor-pointer overflow-hidden rounded-md shadow-md ${
                    window.innerWidth < 768 && index > 0
                      ? "hidden md:block"
                      : ""
                  }`}
                  onClick={() => handleImageClick(currentSlide, index)}
                >
                  <img
                    src={image.src}
                    alt={image.alt}
                    className="w-full h-64 object-cover transition duration-300 ease-in-out hover:scale-105"
                    loading="lazy"
                  />
                </div>
              ))}
            </div>
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center mt-6 gap-2">
        {Array.from({ length: totalSlides }).map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentSlide === index
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default GallerySlider;
