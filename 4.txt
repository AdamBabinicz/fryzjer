import React, { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { Link } from "wouter";
import {
  FaFacebookF,
  FaInstagram,
  FaTwitter,
  FaPaperPlane,
} from "react-icons/fa";
import { useToast } from "@/hooks/use-toast";
import { validateEmail } from "@/lib/utils";
import { getCurrentYear } from "@/lib/utils";
import { useForm, ValidationError } from "@formspree/react";
import { useTheme } from "@/context/ThemeContext";

interface FooterProps {
  onHomeClick: () => void;
  onAboutClick: () => void;
  onServicesClick: () => void;
  onGalleryClick: () => void;
  onContactClick: () => void;
}

const Footer = ({
  onHomeClick,
  onAboutClick,
  onServicesClick,
  onGalleryClick,
  onContactClick,
}: FooterProps) => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [email, setEmail] = useState("");
  const { theme } = useTheme();
  const isDark = theme === "dark"; // Added to determine dark mode
  const useIsDarkMode = () => {
    const [isDark, setIsDark] = useState(false);

    useEffect(() => {
      const checkDarkMode = () => {
        setIsDark(document.documentElement.classList.contains("dark"));
      };

      checkDarkMode();

      const observer = new MutationObserver(checkDarkMode);
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });

      return () => observer.disconnect();
    }, []);

    return isDark;
  };
  // Formspree form hook - replace with your newsletter form ID
  const [formState, handleFormspreeSubmit] = useForm(
    "TWÓJ_NOWY_ID_DLA_NEWSLETTERA"
  );

  // Debug formState
  console.log("Newsletter form state:", formState);

  const handleNewsletterSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!email || !validateEmail(email)) {
      toast({
        title: t("toast.error"),
        description: t("toast.invalidEmail"),
        variant: "destructive",
      });
      return;
    }

    // Submit to Formspree
    handleFormspreeSubmit(e);
  };

  // Reset form and show success message when form is successfully submitted
  useEffect(() => {
    // Show console logs for debugging
    console.log(
      "Newsletter form useEffect running, succeeded:",
      formState.succeeded
    );

    if (formState.succeeded) {
      console.log("Newsletter form succeeded, showing toast");

      toast({
        title: t("toast.success"),
        description: t("toast.newsletterSuccess"),
        variant: "default",
      });

      setEmail("");
    }
  }, [formState.succeeded, t, toast]);

  return (
    <footer className="bg-background/95 text-foreground dark:bg-[#1a1a1a] dark:text-white py-12">
      <div className="max-w-[1400px] mx-auto px-4 sm:px-6 md:px-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <div className="flex items-center mb-6">
              <img
                src={isDark ? "/assets/gr-j.png" : "/assets/gr.png"}
                alt="Agilera Logo"
                className="h-8 mr-2"
              />
              <img
                src={isDark ? "/assets/a-j.png" : "/assets/a.png"}
                alt="A letter"
                className="h-7 inline"
              />
              <span className="text-2xl font-bold playfair tracking-wider text-primary dark:text-[#d6f4ff]">
                GILERA
              </span>
            </div>
            <p className="text-gray-500 dark:text-gray-400 mb-6">
              {t("footer.description")}
            </p>
            <div className="flex space-x-4">
              <a
                href="https://facebook.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Facebook"
              >
                <FaFacebookF />
              </a>
              <a
                href="https://instagram.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Instagram"
              >
                <FaInstagram />
              </a>
              <a
                href="https://twitter.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Twitter"
              >
                <FaTwitter />
              </a>
            </div>
          </div>

          <div>
            <h4 className="text-xl font-semibold playfair mb-6">
              {t("footer.quickLinks")}
            </h4>
            <ul className="space-y-3">
              <li>
                <button
                  onClick={onHomeClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.home")}
                </button>
              </li>
              <li>
                <button
                  onClick={onAboutClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.about")}
                </button>
              </li>
              <li>
                <button
                  onClick={onServicesClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.services")}
                </button>
              </li>
              <li>
                <button
                  onClick={onGalleryClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.gallery")}
                </button>
              </li>
              <li>
                <button
                  onClick={onContactClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.contact")}
                </button>
              </li>
            </ul>
          </div>

          <div>
            <h4 className="text-xl font-semibold playfair mb-6">
              {t("footer.openingHours")}
            </h4>
            <ul className="space-y-2 text-gray-500 dark:text-gray-400">
              <li>{t("footer.monday")}: 9:00 - 19:00</li>
              <li>{t("footer.tuesday")}: 9:00 - 19:00</li>
              <li>{t("footer.wednesday")}: 9:00 - 19:00</li>
              <li>{t("footer.thursday")}: 9:00 - 19:00</li>
              <li>{t("footer.friday")}: 9:00 - 19:00</li>
              <li>{t("footer.saturday")}: 9:00 - 15:00</li>
              <li>
                {t("footer.sunday")}: {t("footer.closed")}
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t border-gray-200 dark:border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center">
          <p className="text-gray-500 text-sm mb-4 md:mb-0">
            &copy; {getCurrentYear()} {t("footer.copyright")}
          </p>
          <div className="flex space-x-4">
            <Link
              href="/privacy-policy"
              className="text-gray-500 hover:text-accent text-sm transition duration-300 ease-in-out"
            >
              {t("footer.privacyPolicy")}
            </Link>
            <Link
              href="/terms"
              className="text-gray-500 hover:text-accent text-sm transition duration-300 ease-in-out"
            >
              {t("footer.terms")}
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


-----------------------------

import React, { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { Link } from "wouter";
import {
  FaFacebookF,
  FaInstagram,
  FaTwitter,
  FaPaperPlane,
} from "react-icons/fa";
import { useToast } from "@/hooks/use-toast";
import { validateEmail } from "@/lib/utils";
import { getCurrentYear } from "@/lib/utils";
import { useForm, ValidationError } from "@formspree/react";
import { useTheme } from "@/context/ThemeContext";

interface FooterProps {
  onHomeClick: () => void;
  onAboutClick: () => void;
  onServicesClick: () => void;
  onGalleryClick: () => void;
  onContactClick: () => void;
}

const Footer = ({
  onHomeClick,
  onAboutClick,
  onServicesClick,
  onGalleryClick,
  onContactClick,
}: FooterProps) => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [email, setEmail] = useState("");
  const { theme } = useTheme();
  const isDark = theme === "dark";

  // Formspree form hook - replace with your newsletter form ID
  const [formState, handleFormspreeSubmit] = useForm(
    "TWÓJ_NOWY_ID_DLA_NEWSLETTERA"
  );

  // Debug formState
  console.log("Newsletter form state:", formState);

  const handleNewsletterSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!email || !validateEmail(email)) {
      toast({
        title: t("toast.error"),
        description: t("toast.invalidEmail"),
        variant: "destructive",
      });
      return;
    }

    // Submit to Formspree
    handleFormspreeSubmit(e);
  };

  // Reset form and show success message when form is successfully submitted
  useEffect(() => {
    // Show console logs for debugging
    console.log(
      "Newsletter form useEffect running, succeeded:",
      formState.succeeded
    );

    if (formState.succeeded) {
      console.log("Newsletter form succeeded, showing toast");

      toast({
        title: t("toast.success"),
        description: t("toast.newsletterSuccess"),
        variant: "default",
      });

      setEmail("");
    }
  }, [formState.succeeded, t, toast]);

  return (
    <footer className="bg-background/95 text-foreground dark:bg-[#1a1a1a] dark:text-white py-12">
      <div className="max-w-[1400px] mx-auto px-4 sm:px-6 md:px-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <div className="flex items-center mb-6">
              <img
                src={isDark ? "/assets/gr-j.png" : "/assets/gr.png"}
                alt="Grzebień Logo"
                className="h-8 mr-2"
              />
              <img
                src={isDark ? "/assets/a-j.png" : "/assets/a.png"}
                alt="A letter"
                className="h-7 inline"
              />
              <span className="text-2xl font-bold playfair tracking-wider text-primary dark:text-[#87CEEB]">
                GILERA
              </span>
            </div>
            <p className="text-gray-500 dark:text-gray-400 mb-6">
              {t("footer.description")}
            </p>
            <div className="flex space-x-4">
              <a
                href="https://facebook.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Facebook"
              >
                <FaFacebookF />
              </a>
              <a
                href="https://instagram.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Instagram"
              >
                <FaInstagram />
              </a>
              <a
                href="https://twitter.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-500 dark:text-white hover:text-accent transition duration-300 ease-in-out"
                aria-label="Twitter"
              >
                <FaTwitter />
              </a>
            </div>
          </div>

          <div>
            <h4 className="text-xl font-semibold playfair mb-6">
              {t("footer.quickLinks")}
            </h4>
            <ul className="space-y-3">
              <li>
                <button
                  onClick={onHomeClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.home")}
                </button>
              </li>
              <li>
                <button
                  onClick={onAboutClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.about")}
                </button>
              </li>
              <li>
                <button
                  onClick={onServicesClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.services")}
                </button>
              </li>
              <li>
                <button
                  onClick={onGalleryClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.gallery")}
                </button>
              </li>
              <li>
                <button
                  onClick={onContactClick}
                  className="text-gray-500 dark:text-gray-400 hover:text-accent transition duration-300 ease-in-out"
                >
                  {t("nav.contact")}
                </button>
              </li>
            </ul>
          </div>

          <div>
            <h4 className="text-xl font-semibold playfair mb-6">
              {t("footer.openingHours")}
            </h4>
            <ul className="space-y-2 text-gray-500 dark:text-gray-400">
              <li>{t("footer.monday")}: 9:00 - 19:00</li>
              <li>{t("footer.tuesday")}: 9:00 - 19:00</li>
              <li>{t("footer.wednesday")}: 9:00 - 19:00</li>
              <li>{t("footer.thursday")}: 9:00 - 19:00</li>
              <li>{t("footer.friday")}: 9:00 - 19:00</li>
              <li>{t("footer.saturday")}: 9:00 - 15:00</li>
              <li>
                {t("footer.sunday")}: {t("footer.closed")}
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t border-gray-200 dark:border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center">
          <p className="text-gray-500 text-sm mb-4 md:mb-0">
            &copy; {getCurrentYear()} {t("footer.copyright")}
          </p>
          <div className="flex space-x-4">
            <Link
              href="/privacy-policy"
              className="text-gray-500 hover:text-accent text-sm transition duration-300 ease-in-out"
            >
              {t("footer.privacyPolicy")}
            </Link>
            <Link
              href="/terms"
              className="text-gray-500 hover:text-accent text-sm transition duration-300 ease-in-out"
            >
              {t("footer.terms")}
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


----------------------------------

import { FaMoon, FaSun } from "react-icons/fa";
import { useTheme } from "@/context/ThemeContext";
import { useTranslation } from "react-i18next";

interface ThemeToggleProps {
  isMobile?: boolean;
}

const ThemeToggle = ({ isMobile = false }: ThemeToggleProps) => {
  const { t } = useTranslation();
  const { theme, toggleTheme } = useTheme();

  console.log("ThemeToggle rendering, current theme:", theme);

  // Create a direct handler that uses document manipulation for immediate visual feedback
  const handleToggleTheme = () => {
    console.log("ThemeToggle: Button clicked, current theme:", theme);

    // Manual document class manipulation for immediate visual feedback
    const isDark = document.documentElement.classList.contains("dark");
    if (isDark) {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("theme", "light");
      console.log("ThemeToggle: Manually switched to light mode");
    } else {
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
      console.log("ThemeToggle: Manually switched to dark mode");
    }

    // Also call the context toggler to maintain state
    toggleTheme();
  };

  return (
    <button
      onClick={handleToggleTheme}
      className="text-primary dark:text-white hover:text-accent dark:hover:text-accent transition duration-300 ease-in-out"
      aria-label={t("accessibility.toggleTheme")}
    >
      {document.documentElement.classList.contains("dark") ? (
        <FaSun />
      ) : (
        <FaMoon />
      )}
    </button>
  );
};

export default ThemeToggle;


---------------------------

import { createContext, useState, useEffect, useContext } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType>({
  theme: 'light',
  toggleTheme: () => {}
});

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light');
  
  // Initialize theme from localStorage or system preference
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') as Theme | null;
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    console.log("ThemeContext: Initializing theme", { savedTheme, prefersDark });
    
    if (savedTheme) {
      console.log("ThemeContext: Using saved theme", savedTheme);
      setTheme(savedTheme);
      document.documentElement.classList.toggle('dark', savedTheme === 'dark');
    } else if (prefersDark) {
      console.log("ThemeContext: Using system preference (dark)");
      setTheme('dark');
      document.documentElement.classList.add('dark');
    } else {
      console.log("ThemeContext: Using default (light)");
      document.documentElement.classList.remove('dark');
    }
  }, []);
  
  const toggleTheme = () => {
    console.log("ThemeContext: Toggle theme called, current theme:", theme);
    
    setTheme(prevTheme => {
      const newTheme = prevTheme === 'light' ? 'dark' : 'light';
      console.log("ThemeContext: Setting new theme:", newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Ensure proper class toggling
      if (newTheme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      return newTheme;
    });
  };
  
  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  
  return context;
}


------------------------------

import { createContext, useState, useEffect, useContext } from 'react';
import { useTranslation } from 'react-i18next';
import i18n from 'i18next';

interface LanguageContextType {
  language: string;
  changeLanguage: (lang: string) => void;
}

const LanguageContext = createContext<LanguageContextType>({
  language: i18n.language || 'en',
  changeLanguage: (lang: string) => {
    i18n.changeLanguage(lang);
  }
});

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const { i18n } = useTranslation();
  const [language, setLanguage] = useState(i18n.language || 'en');
  
  // Initialize language from i18n
  useEffect(() => {
    setLanguage(i18n.language);
  }, [i18n.language]);
  
  const changeLanguage = (lang: string) => {
    i18n.changeLanguage(lang);
    setLanguage(lang);
  };
  
  return (
    <LanguageContext.Provider value={{ language, changeLanguage }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  
  return context;
}


--------------------------------

import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

import translationPL from '../translations/pl.json';
import translationEN from '../translations/en.json';

// This ensures we have a single instance of i18n
let initialized = false;

/**
 * Singleton pattern for i18n initialization
 * This prevents multiple initializations in React strict mode
 * and ensures consistent language settings
 */
export const setupI18n = () => {
  if (initialized) return i18n;
  
  console.log('Initializing i18n with languages:', { pl: !!translationPL, en: !!translationEN });
  
  // Resources for i18next
  const resources = {
    pl: {
      translation: translationPL
    },
    en: {
      translation: translationEN
    }
  };

  // Initialize i18next
  i18n
    // Detect user language
    .use(LanguageDetector)
    // Pass the i18n instance to react-i18next
    .use(initReactI18next)
    // Init i18next
    .init({
      resources,
      fallbackLng: 'en',
      lng: localStorage.getItem('i18nextLng') || 'en', // Explicitly use stored language or default
      
      // Turn on debug only in development
      debug: process.env.NODE_ENV === 'development',
      
      interpolation: {
        escapeValue: false, // React already safes from XSS
      },
      
      detection: {
        order: ['localStorage', 'navigator'],
        caches: ['localStorage'],
      },
      
      react: {
        useSuspense: true,
      }
    });
    
  initialized = true;
  return i18n;
};

// Initialize immediately
setupI18n();

export default i18n;


----------------------------

import { useRef } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Switch, Route, useLocation } from "wouter";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import Home from "@/pages/Home";
import About from "@/pages/About";
import Services from "@/pages/Services";
import Gallery from "@/pages/Gallery";
import Contact from "@/pages/Contact";
import PrivacyPolicy from "@/pages/PrivacyPolicy";
import Terms from "@/pages/Terms";
import NotFound from "@/pages/not-found";
import GalleryModal from "@/components/GalleryModal";
import ServiceModal from "@/components/ServiceModal";
import { useLanguage } from "@/context/LanguageContext";
// Importujesz teraz ServiceProvider
import { ServiceProvider } from "@/context/ServiceContext"; // Upewnij się, że ścieżka jest poprawna

function App() {
  const { t } = useTranslation();
  const { language } = useLanguage();
  const [location] = useLocation();

  // References for scrolling to sections
  const homeRef = useRef<HTMLDivElement>(null);
  const aboutRef = useRef<HTMLDivElement>(null);
  const servicesRef = useRef<HTMLDivElement>(null);
  const galleryRef = useRef<HTMLDivElement>(null);
  const contactRef = useRef<HTMLDivElement>(null);

  const scrollToSection = (ref: React.RefObject<HTMLDivElement>) => {
    if (ref.current) {
      window.scrollTo({
        top: ref.current.offsetTop - 80, // Adjust for header height
        behavior: "smooth",
      });
    }
  };

  // Check if we're on a special page (privacy policy, terms, etc.)
  const isSpecialPage = location === "/privacy-policy" || location === "/terms";

  // Main page content with all sections
  const MainContent = () => (
    <>
      <Home ref={homeRef} onContactClick={() => scrollToSection(contactRef)} />
      <About ref={aboutRef} />
      <Services ref={servicesRef} />
      <Gallery ref={galleryRef} />
      <Contact ref={contactRef} />
    </>
  );

  return (
    <ServiceProvider>
      {" "}
      {/* Oto ServiceProvider */}
      <Helmet>
        <html lang={language} />
        <title>{t("meta.title")}</title>
        <meta name="description" content={t("meta.description")} />
        <meta property="og:title" content={t("meta.ogTitle")} />
        <meta property="og:description" content={t("meta.ogDescription")} />
      </Helmet>
      {/* Skip Link for Accessibility */}
      <a
        href="#main-content"
        className="sr-only focus:not-sr-only focus:absolute focus:p-4 focus:bg-accent focus:text-white focus:z-50"
      >
        {t("accessibility.skipToContent")}
      </a>
      <Navbar
        onHomeClick={() => {
          if (isSpecialPage) window.location.href = "/";
          else scrollToSection(homeRef);
        }}
        onAboutClick={() => {
          if (isSpecialPage) window.location.href = "/#about";
          else scrollToSection(aboutRef);
        }}
        onServicesClick={() => {
          if (isSpecialPage) window.location.href = "/#services";
          else scrollToSection(servicesRef);
        }}
        onGalleryClick={() => {
          if (isSpecialPage) window.location.href = "/#gallery";
          else scrollToSection(galleryRef);
        }}
        onContactClick={() => {
          if (isSpecialPage) window.location.href = "/#contact";
          else scrollToSection(contactRef);
        }}
      />
      <main
        id="main-content"
        className="max-w-[1400px] mx-auto px-4 sm:px-6 md:px-8"
      >
        <Switch>
          <Route path="/" component={MainContent} />
          <Route path="/privacy-policy" component={PrivacyPolicy} />
          <Route path="/terms" component={Terms} />
          <Route component={NotFound} />
        </Switch>
      </main>
      <Footer
        onHomeClick={() => {
          if (isSpecialPage) window.location.href = "/";
          else scrollToSection(homeRef);
        }}
        onAboutClick={() => {
          if (isSpecialPage) window.location.href = "/#about";
          else scrollToSection(aboutRef);
        }}
        onServicesClick={() => {
          if (isSpecialPage) window.location.href = "/#services";
          else scrollToSection(servicesRef);
        }}
        onGalleryClick={() => {
          if (isSpecialPage) window.location.href = "/#gallery";
          else scrollToSection(galleryRef);
        }}
        onContactClick={() => {
          if (isSpecialPage) window.location.href = "/#contact";
          else scrollToSection(contactRef);
        }}
      />
      {/* Modals */}
      <GalleryModal />
      <ServiceModal />
    </ServiceProvider>
  );
}

export default App;


--------------------------

// Main page content with all sections
  const MainContent = () => (
    <>
      <Home ref={homeRef} onContactClick={() => scrollToSection(contactRef)} />
      <About ref={aboutRef} />
      <Services ref={servicesRef} />
      <Gallery ref={galleryRef} />
      <Contact ref={contactRef} />
    </>
  );

------------------------------

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
});


-------------------------------

import React, { forwardRef, useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { FaMapMarkerAlt, FaPhoneAlt, FaEnvelope } from "react-icons/fa";
import { validateEmail, validatePhone } from "@/lib/utils";
import { useForm, ValidationError } from "@formspree/react";

const Contact = forwardRef<HTMLDivElement, {}>((_, ref) => {
  const { t } = useTranslation();
  const { toast } = useToast();

  // Formspree form hook - replace with your form ID
  const [formState, handleFormspreeSubmit] = useForm("xdkgzprr");

  // Console log formState to debug
  console.log("Contact form state:", formState);

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    message: "",
  });

  const [errors, setErrors] = useState({
    name: false,
    email: false,
    message: false,
  });

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Clear error when typing
    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({ ...prev, [name]: false }));
    }
  };

  const validateForm = () => {
    const newErrors = {
      name: !formData.name.trim(),
      email: !formData.email.trim() || !validateEmail(formData.email),
      message: !formData.message.trim(),
    };

    setErrors(newErrors);
    return !Object.values(newErrors).some((error) => error);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!validateForm()) {
      toast({
        title: t("toast.error"),
        description: t("toast.formErrors"),
        variant: "destructive",
      });
      return;
    }

    // Submit to Formspree
    handleFormspreeSubmit(e);
  };

  // Reset form and show success message when form is successfully submitted
  useEffect(() => {
    // Show console logs for debugging
    console.log(
      "Contact form useEffect running, succeeded:",
      formState.succeeded
    );

    if (formState.succeeded) {
      console.log("Form succeeded, showing toast");

      toast({
        title: t("toast.success"),
        description: t("toast.messageSent"),
        variant: "default",
      });

      // Reset form after successful submission
      setFormData({
        name: "",
        email: "",
        phone: "",
        message: "",
      });
    }
  }, [formState.succeeded, t, toast]);

  return (
    <section
      ref={ref}
      id="contact"
      className="py-20 bg-neutral dark:bg-transparent section-contact"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <motion.h2
            initial={{ opacity: 0, y: -20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl md:text-4xl font-bold playfair mb-4"
          >
            {t("contact.title")}
          </motion.h2>
          <motion.div
            initial={{ opacity: 0, width: 0 }}
            whileInView={{ opacity: 1, width: 96 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="h-1 bg-accent mx-auto"
          />
        </div>

        <div className="grid md:grid-cols-2 gap-12">
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="space-y-8"
          >
            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaMapMarkerAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.address")}</h3>
                <p className="text-gray-600 dark:text-gray-300">
                  {t("contact.addressDetails")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaPhoneAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.phone")}</h3>
                <p className="text-gray-600 dark:text-gray-300">
                  {t("contact.phoneNumber")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaEnvelope size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.email")}</h3>
                <p className="text-gray-600 dark:text-gray-300">
                  {t("contact.emailAddress")}
                </p>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="bg-white dark:bg-[#253754] rounded-lg p-8 shadow-lg"
          >
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label htmlFor="name" className="block mb-2 font-medium">
                  {t("contact.nameLabel")}
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.name
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.name}
                  aria-describedby={errors.name ? "name-error" : undefined}
                />
                {errors.name && (
                  <p id="name-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.nameRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Name"
                  field="name"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="email" className="block mb-2 font-medium">
                  {t("contact.emailLabel")}
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.email
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.email}
                  aria-describedby={errors.email ? "email-error" : undefined}
                />
                {errors.email && (
                  <p id="email-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.emailInvalid")}
                  </p>
                )}
                <ValidationError
                  prefix="Email"
                  field="email"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="phone" className="block mb-2 font-medium">
                  {t("contact.phoneLabel")}
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white"
                />
                <ValidationError
                  prefix="Phone"
                  field="phone"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="message" className="block mb-2 font-medium">
                  {t("contact.messageLabel")}
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  rows={4}
                  className={`w-full px-4 py-2 border ${
                    errors.message
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.message}
                  aria-describedby={
                    errors.message ? "message-error" : undefined
                  }
                />
                {errors.message && (
                  <p id="message-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.messageRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Message"
                  field="message"
                  errors={formState.errors}
                />
              </div>

              <div>
                <button
                  type="submit"
                  className="px-6 py-3 bg-accent text-white font-medium hover:bg-opacity-90 transition duration-300 ease-in-out"
                  disabled={formState.submitting}
                >
                  {formState.submitting
                    ? t("contact.sending")
                    : t("contact.sendMessage")}
                </button>
                <ValidationError errors={formState.errors} />
              </div>
            </form>
          </motion.div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="mt-12"
        >
          <div className="bg-white dark:bg-[#253754] rounded-lg shadow-lg h-64 md:h-96">
            <iframe
              src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2443.3151954985895!2d21.00717661593672!3d52.23178017976199!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x471eccf695420895%3A0xcb0e27f11ace068!2sWarsaw%2C%20Poland!5e0!3m2!1sen!2sus!4v1627654835981!5m2!1sen!2sus"
              width="100%"
              height="100%"
              style={{ border: 0 }}
              allowFullScreen={false}
              loading="lazy"
              title={t("contact.mapTitle")}
              className="rounded-md"
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
});

export default Contact;


----------------------------------

import React, { forwardRef, useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { FaMapMarkerAlt, FaPhoneAlt, FaEnvelope } from "react-icons/fa";
import { validateEmail, validatePhone } from "@/lib/utils";
import { useForm, ValidationError } from "@formspree/react";

const Contact = forwardRef<HTMLDivElement, {}>((_, ref) => {
  const { t } = useTranslation();
  const { toast } = useToast();

  // Formspree form hook - replace with your form ID
  const [formState, handleFormspreeSubmit] = useForm("mnqeovvr");

  // Console log formState to debug
  console.log("Contact form state:", formState);

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    message: "",
  });

  const [errors, setErrors] = useState({
    name: false,
    email: false,
    message: false,
  });

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Clear error when typing
    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({ ...prev, [name]: false }));
    }
  };

  const validateForm = () => {
    const newErrors = {
      name: !formData.name.trim(),
      email: !formData.email.trim() || !validateEmail(formData.email),
      message: !formData.message.trim(),
    };

    setErrors(newErrors);
    return !Object.values(newErrors).some((error) => error);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!validateForm()) {
      toast({
        title: t("toast.error"),
        description: t("toast.formErrors"),
        variant: "destructive",
      });
      return;
    }

    // Submit to Formspree
    handleFormspreeSubmit(e);
  };

  // Reset form and show success message when form is successfully submitted
  useEffect(() => {
    // Show console logs for debugging
    console.log(
      "Contact form useEffect running, succeeded:",
      formState.succeeded
    );

    if (formState.succeeded) {
      console.log("Form succeeded, showing toast");

      toast({
        title: t("toast.success"),
        description: t("toast.messageSent"),
        variant: "default",
      });

      // Reset form after successful submission
      setFormData({
        name: "",
        email: "",
        phone: "",
        message: "",
      });
    }
  }, [formState.succeeded, t, toast]);

  return (
    <section
      ref={ref}
      id="contact"
      className="py-20 bg-neutral dark:bg-transparent section-contact"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <motion.h2
            initial={{ opacity: 0, y: -20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl md:text-4xl font-bold playfair mb-4"
          >
            {t("contact.title")}
          </motion.h2>
          <motion.div
            initial={{ opacity: 0, width: 0 }}
            whileInView={{ opacity: 1, width: 96 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="h-1 bg-accent mx-auto"
          />
        </div>

        <div className="grid md:grid-cols-2 gap-12">
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="space-y-8"
          >
            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaMapMarkerAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.address")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.addressDetails")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaPhoneAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.phone")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.phoneNumber")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaEnvelope size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.email")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.emailAddress")}
                </p>
              </div>
            </div>

            <div className="mt-12 p-6 bg-white/50 dark:bg-[#1e2e44]/50 rounded-lg backdrop-blur-sm">
              <h3 className="font-semibold mb-4 text-center">
                {t("contact.certifications")}
              </h3>
              <div className="grid grid-cols-3 gap-4 items-center justify-items-center">
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M7 21L12 17L17 21V3H7V21Z"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">Premium Stylist</span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 15C15.866 15 19 11.866 19 8C19 4.134 15.866 1 12 1C8.13401 1 5 4.134 5 8C5 11.866 8.13401 15 12 15Z"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M12 15V23"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M8 19H16"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    Master Certificate
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 7H4C2.89543 7 2 7.89543 2 9V19C2 20.1046 2.89543 21 4 21H20C21.1046 21 22 20.1046 22 19V9C22 7.89543 21.1046 7 20 7Z"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M16 21V5C16 4.46957 15.7893 3.96086 15.4142 3.58579C15.0391 3.21071 14.5304 3 14 3H10C9.46957 3 8.96086 3.21071 8.58579 3.58579C8.21071 3.96086 8 4.46957 8 5V21"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">Color Expert</span>
                </div>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="bg-white dark:bg-[#253754] rounded-lg p-8 shadow-lg"
          >
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label htmlFor="name" className="block mb-2 font-medium">
                  {t("contact.nameLabel")}
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.name
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.name}
                  aria-describedby={errors.name ? "name-error" : undefined}
                />
                {errors.name && (
                  <p id="name-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.nameRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Name"
                  field="name"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="email" className="block mb-2 font-medium">
                  {t("contact.emailLabel")}
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.email
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.email}
                  aria-describedby={errors.email ? "email-error" : undefined}
                />
                {errors.email && (
                  <p id="email-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.emailInvalid")}
                  </p>
                )}
                <ValidationError
                  prefix="Email"
                  field="email"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="phone" className="block mb-2 font-medium">
                  {t("contact.phoneLabel")}
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white"
                />
                <ValidationError
                  prefix="Phone"
                  field="phone"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="message" className="block mb-2 font-medium">
                  {t("contact.messageLabel")}
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  rows={4}
                  className={`w-full px-4 py-2 border ${
                    errors.message
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.message}
                  aria-describedby={
                    errors.message ? "message-error" : undefined
                  }
                />
                {errors.message && (
                  <p id="message-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.messageRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Message"
                  field="message"
                  errors={formState.errors}
                />
              </div>

              <div>
                <button
                  type="submit"
                  className="px-6 py-3 bg-accent text-white font-medium hover:bg-opacity-90 transition duration-300 ease-in-out"
                  disabled={formState.submitting}
                >
                  {formState.submitting
                    ? t("contact.sending")
                    : t("contact.sendMessage")}
                </button>
                <ValidationError errors={formState.errors} />
              </div>
            </form>
          </motion.div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="mt-12"
        >
          <div className="bg-white dark:bg-[#253754] rounded-lg shadow-lg p-4 h-64 md:h-96">
            <iframe
              src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2443.3151954985895!2d21.00717661593672!3d52.23178017976199!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x471eccf695420895%3A0xcb0e27f11ace068!2sWarsaw%2C%20Poland!5e0!3m2!1sen!2sus!4v1627654835981!5m2!1sen!2sus"
              width="100%"
              height="100%"
              style={{ border: 0 }}
              allowFullScreen={false}
              loading="lazy"
              title={t("contact.mapTitle")}
              className="rounded-md"
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
});

export default Contact;


----------------------------------

import React, { forwardRef, useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { FaMapMarkerAlt, FaPhoneAlt, FaEnvelope } from "react-icons/fa";
import { validateEmail, validatePhone } from "@/lib/utils";
import { useForm, ValidationError } from "@formspree/react";

const Contact = forwardRef<HTMLDivElement, {}>((_, ref) => {
  const { t } = useTranslation();
  const { toast } = useToast();

  const [formState, handleFormspreeSubmit] = useForm("mnqeovvr");

  console.log("Contact form state:", formState);

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    message: "",
  });

  const [errors, setErrors] = useState({
    name: false,
    email: false,
    message: false,
  });

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({ ...prev, [name]: false }));
    }
  };

  const validateForm = () => {
    const newErrors = {
      name: !formData.name.trim(),
      email: !formData.email.trim() || !validateEmail(formData.email),
      message: !formData.message.trim(),
    };

    setErrors(newErrors);
    return !Object.values(newErrors).some((error) => error);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!validateForm()) {
      toast({
        title: t("toast.error"),
        description: t("toast.formErrors"),
        variant: "destructive",
      });
      return;
    }

    handleFormspreeSubmit(e);
  };

  useEffect(() => {
    console.log(
      "Contact form useEffect running, succeeded:",
      formState.succeeded
    );

    if (formState.succeeded) {
      console.log("Form succeeded, showing toast");

      toast({
        title: t("toast.success"),
        description: t("toast.messageSent"),
        variant: "default",
      });

      setFormData({
        name: "",
        email: "",
        phone: "",
        message: "",
      });
    }
  }, [formState.succeeded, t, toast]);

  return (
    <section
      ref={ref}
      id="contact"
      className="py-20 bg-neutral dark:bg-transparent section-contact"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <motion.h2
            initial={{ opacity: 0, y: -20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl md:text-4xl font-bold playfair mb-4"
          >
            {t("contact.title")}
          </motion.h2>
          <motion.div
            initial={{ opacity: 0, width: 0 }}
            whileInView={{ opacity: 1, width: 96 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="h-1 bg-accent mx-auto"
          />
        </div>

        <div className="grid md:grid-cols-2 gap-12">
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="space-y-8"
          >
            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaMapMarkerAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.address")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.addressDetails")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaPhoneAlt size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.phone")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.phoneNumber")}
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="text-accent">
                <FaEnvelope size={24} />
              </div>
              <div>
                <h3 className="font-semibold mb-2">{t("contact.email")}</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {t("contact.emailAddress")}
                </p>
              </div>
            </div>

            <div className="mt-12 p-6 bg-[#f5e6d3]/50 dark:bg-[#2a1810]/50 rounded-lg backdrop-blur-sm">
              <h3 className="font-semibold mb-4 text-center">
                {t("contact.certifications")}
              </h3>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-6 items-center justify-items-center">
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M7 21L12 17L17 21V3H7V21Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    {t("contact.premiumStylist")}
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 15C15.866 15 19 11.866 19 8C19 4.134 15.866 1 12 1C8.13401 1 5 4.134 5 8C5 11.866 8.13401 15 12 15Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M12 15V23"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M8 19H16"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    {t("contact.masterCertificate")}
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 7H4C2.89543 7 2 7.89543 2 9V19C2 20.1046 2.89543 21 4 21H20C21.1046 21 22 20.1046 22 19V9C22 7.89543 21.1046 7 20 7Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                    <path
                      d="M16 21V5C16 4.46957 15.7893 3.96086 15.4142 3.58579C15.0391 3.21071 14.5304 3 14 3H10C9.46957 3 8.96086 3.21071 8.58579 3.58579C8.21071 3.96086 8 4.46957 8 5V21"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    {t("contact.colorExpert")}
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    {t("contact.topRated")}
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <svg
                    className="w-12 h-12 text-accent mb-2"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M13 3C13 2.44772 12.5523 2 12 2C11.4477 2 11 2.44772 11 3V4C11 4.55228 11.4477 5 12 5C12.5523 5 13 4.55228 13 4V3Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                    />
                    <path
                      d="M8 14C8 11.7909 9.79086 10 12 10C14.2091 10 16 11.7909 16 14V19C16 20.1046 15.1046 21 14 21H10C8.89543 21 8 20.1046 8 19V14Z"
                      stroke="currentColor"
                      strokeWidth="1.5"
                    />
                    <path
                      d="M17 6C17 7.65685 14.7614 9 12 9C9.23858 9 7 7.65685 7 6"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                    />
                  </svg>
                  <span className="text-sm text-center">
                    {t("contact.hairExpert")}
                  </span>
                </div>
              </div>
              <div className="mt-8 text-center max-w-2xl mx-auto">
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  {t("contact.certificationDescription")}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {t("contact.expertiseGuarantee")}
                </p>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
            className="bg-white dark:bg-[#253754] rounded-lg p-8 shadow-lg"
          >
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label htmlFor="name" className="block mb-2 font-medium">
                  {t("contact.nameLabel")}
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.name
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.name}
                  aria-describedby={errors.name ? "name-error" : undefined}
                />
                {errors.name && (
                  <p id="name-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.nameRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Name"
                  field="name"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="email" className="block mb-2 font-medium">
                  {t("contact.emailLabel")}
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-2 border ${
                    errors.email
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.email}
                  aria-describedby={errors.email ? "email-error" : undefined}
                />
                {errors.email && (
                  <p id="email-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.emailInvalid")}
                  </p>
                )}
                <ValidationError
                  prefix="Email"
                  field="email"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="phone" className="block mb-2 font-medium">
                  {t("contact.phoneLabel")}
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white"
                />
                <ValidationError
                  prefix="Phone"
                  field="phone"
                  errors={formState.errors}
                />
              </div>

              <div className="mb-6">
                <label htmlFor="message" className="block mb-2 font-medium">
                  {t("contact.messageLabel")}
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  rows={4}
                  className={`w-full px-4 py-2 border ${
                    errors.message
                      ? "border-red-500"
                      : "border-gray-300 dark:border-gray-700"
                  } rounded-md focus:outline-none focus:ring-2 focus:ring-accent dark:bg-[#1e2e44] dark:text-white`}
                  aria-invalid={errors.message}
                  aria-describedby={
                    errors.message ? "message-error" : undefined
                  }
                />
                {errors.message && (
                  <p id="message-error" className="mt-1 text-red-500 text-sm">
                    {t("contact.messageRequired")}
                  </p>
                )}
                <ValidationError
                  prefix="Message"
                  field="message"
                  errors={formState.errors}
                />
              </div>

              <div>
                <button
                  type="submit"
                  className="px-6 py-3 bg-accent text-white font-medium hover:bg-opacity-90 transition duration-300 ease-in-out"
                  disabled={formState.submitting}
                >
                  {formState.submitting
                    ? t("contact.sending")
                    : t("contact.sendMessage")}
                </button>
                <ValidationError errors={formState.errors} />
              </div>
            </form>
          </motion.div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="mt-12"
        >
          <div className="bg-white dark:bg-[#253754] rounded-lg shadow-lg p-4 h-64 md:h-96">
            <iframe
              src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2443.3151954985895!2d21.00717661593672!3d52.23178017976199!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x471eccf695420895%3A0xcb0e27f11ace068!2sWarsaw%2C%20Poland!5e0!3m2!1sen!2sus!4v1627654835981!5m2!1sen!2sus"
              width="100%"
              height="100%"
              style={{ border: 0 }}
              allowFullScreen={false}
              loading="lazy"
              title={t("contact.mapTitle")}
              className="rounded-md"
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
});

export default Contact;


-----------------------------

import { useState, useEffect } from "react";
import { LuScissors } from "react-icons/lu";
import { motion, AnimatePresence } from "framer-motion";

const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const toggleVisibility = () => {
      if (window.scrollY > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener("scroll", toggleVisibility);
    return () => window.removeEventListener("scroll", toggleVisibility);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.button
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.5 }}
          onClick={scrollToTop}
          className="fixed bottom-8 right-8 p-3 rounded-full bg-accent hover:bg-accent/80 text-white dark:bg-[hsl(35,25%,18%)] dark:hover:bg-[hsl(35,25%,25%)] shadow-lg transition-all duration-300 z-50 group"
          aria-label="Scroll to top"
        >
          <LuScissors className="w-6 h-6 transform group-hover:rotate-45 transition-transform duration-300" />
        </motion.button>
      )}
    </AnimatePresence>
  );
};

export default ScrollToTop;


----------------------------

import { useState, useEffect, useRef } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();

  // Flatten gallery data for mobile view
  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const totalItems = isMobile ? flattenedImages.length : galleryData.length;

  // Auto slide functionality
  useEffect(() => {
    const interval = setInterval(() => {
      goToPrevSlide();
    }, 5000);

    return () => clearInterval(interval);
  }, [currentIndex]);

  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = totalItems - 1;
    if (newIndex >= totalItems) newIndex = 0;

    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    goToSlide(currentIndex - 1);
  };

  const goToNextSlide = () => {
    setDirection("next");
    goToSlide(currentIndex + 1);
  };

  // Touch handlers for mobile swiping
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      // Swipe left
      goToNextSlide();
    }

    if (touchStart - touchEnd < -50) {
      // Swipe right
      goToPrevSlide();
    }
  };

  // Handle image click to open modal
  const handleImageClick = (imageData: { fullSrc: string; alt: string }) => {
    openGalleryModal(imageData.fullSrc, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    return (
      <div className="grid grid-cols-3 gap-4">
        {galleryData[currentIndex]?.images.map((image, index) => (
          <div
            key={`image-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="relative">
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait">
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? 100 : -100,
            }}
            animate={{ opacity: 1, x: 0 }}
            exit={{
              opacity: 0,
              x: direction === "next" ? -100 : 100,
            }}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center mt-6 gap-2">
        {Array.from({ length: totalItems }).map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === index
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default GallerySlider;


----------------------------

import { useState, useEffect, useRef } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();

  const [isPaused, setIsPaused] = useState(false); // <--- NOWY STAN
  const intervalRef = useRef<NodeJS.Timeout | null>(null); // <--- Ref dla interwału

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const totalItems = isMobile ? flattenedImages.length : galleryData.length;

  // Funkcja do przejścia do poprzedniego slajdu (używana w autoplay i przycisku)
  const goToPrevSlideStable = () => {
    // Zmieniona nazwa, aby uniknąć konfliktu w zależnościach useEffect
    setDirection("prev");
    setCurrentIndex((prev) => (prev - 1 + totalItems) % totalItems);
  };

  // Auto slide functionality
  useEffect(() => {
    // Funkcja do czyszczenia interwału
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && totalItems > 1) {
      // Uruchom tylko jeśli nie jest zapauzowany i jest więcej niż 1 slajd
      clearAutoplayInterval(); // Wyczyść poprzedni interwał na wszelki wypadek
      intervalRef.current = setInterval(() => {
        goToPrevSlideStable(); // Użyj stabilnej funkcji
      }, 5000);
      console.log("Autoplay started/resumed");
    } else {
      clearAutoplayInterval(); // Zatrzymaj autoplay, jeśli jest zapauzowany lub tylko 1 slajd
      console.log("Autoplay paused or stopped");
    }

    return () => clearAutoplayInterval(); // Cleanup przy odmontowaniu lub zmianie zależności
  }, [isPaused, totalItems]); // Usunięto currentIndex z zależności, aby uniknąć resetowania timera przy każdej zmianie slajdu

  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = totalItems - 1;
    if (newIndex >= totalItems) newIndex = 0;

    // Określ kierunek na podstawie tego, czy nowy indeks jest większy czy mniejszy
    // (lub jeśli przeskakujemy z końca na początek i odwrotnie)
    if (newIndex > currentIndex) {
      if (currentIndex === 0 && newIndex === totalItems - 1) {
        // Przeskok z pierwszego na ostatni (ruch w tył)
        setDirection("prev");
      } else {
        setDirection("next");
      }
    } else if (newIndex < currentIndex) {
      if (currentIndex === totalItems - 1 && newIndex === 0) {
        // Przeskok z ostatniego na pierwszy (ruch w przód)
        setDirection("next");
      } else {
        setDirection("prev");
      }
    }
    // Jeśli newIndex === currentIndex, kierunek pozostaje bez zmian

    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex((prev) => (prev - 1 + totalItems) % totalItems);
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % totalItems);
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }

    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null; // Zabezpieczenie na wypadek gdyby currentImage był undefined
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null; // Zabezpieczenie

    return (
      <div className="grid grid-cols-3 gap-4">
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`} // Poprawiony klucz dla unikalności
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  // Handlery dla pauzy przy najechaniu myszką
  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter} // <--- DODANY HANDLER
      onMouseLeave={handleMouseLeave} // <--- DODANY HANDLER
    >
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          {" "}
          {/* initial={false} dla lepszego zachowania przy pierwszym renderze */}
          <motion.div
            key={currentIndex} // Klucz musi być unikalny dla każdego slajdu
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%", // Użyj stringów dla procentów
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%", // Użyj stringów dla procentów
            }}
            transition={{ duration: 0.5 }}
            className="px-4" // Upewnij się, że content wewnątrz ma odpowiednią szerokość
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center mt-6 gap-2">
        {Array.from({ length: totalItems }).map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === index
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: index + 1 })}
          />
        ))}
      </div>
    </div>
  );
};

export default GallerySlider;


-------------------------------

import { useState, useEffect, useRef } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const desktopTotalSlides = galleryData.length;
  const mobileTotalSlides = flattenedImages.length;
  const currentViewTotalItems = isMobile
    ? mobileTotalSlides
    : desktopTotalSlides;

  const goToPrevSlideStable = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  useEffect(() => {
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && currentViewTotalItems > 1) {
      clearAutoplayInterval();
      intervalRef.current = setInterval(() => {
        goToPrevSlideStable();
      }, 5000);
    } else {
      clearAutoplayInterval();
    }

    return () => clearAutoplayInterval();
  }, [isPaused, currentViewTotalItems, goToPrevSlideStable]); // Dodano goToPrevSlideStable do zależności

  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = currentViewTotalItems - 1;
    if (newIndex >= currentViewTotalItems) newIndex = 0;

    if (newIndex > currentIndex) {
      if (currentIndex === 0 && newIndex === currentViewTotalItems - 1) {
        setDirection("prev");
      } else {
        setDirection("next");
      }
    } else if (newIndex < currentIndex) {
      if (currentIndex === currentViewTotalItems - 1 && newIndex === 0) {
        setDirection("next");
      } else {
        setDirection("prev");
      }
    }
    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex(
      (prev) => (prev + 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }
    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null;
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null;

    return (
      <div className="grid grid-cols-3 gap-4">
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  const renderDots = () => {
    const dots = [];
    const maxMobileDots = 7;

    if (isMobile && mobileTotalSlides > maxMobileDots) {
      let start = Math.max(0, currentIndex - Math.floor(maxMobileDots / 2));
      let end = Math.min(mobileTotalSlides - 1, start + maxMobileDots - 1);

      if (end - start + 1 < maxMobileDots) {
        start = Math.max(0, end - maxMobileDots + 1);
      }

      if (start > 0) {
        dots.push(
          <span
            key="start-ellipsis"
            className="text-neutral dark:text-gray-600 mx-1"
          >
            ...
          </span>
        );
      }

      for (let i = start; i <= end; i++) {
        dots.push(
          <button
            key={`dot-mobile-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }

      if (end < mobileTotalSlides - 1) {
        dots.push(
          <span
            key="end-ellipsis"
            className="text-neutral dark:text-gray-600 mx-1"
          >
            ...
          </span>
        );
      }
    } else {
      const itemsToIterate = currentViewTotalItems;
      for (let i = 0; i < itemsToIterate; i++) {
        dots.push(
          <button
            key={`dot-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }
    }
    return dots;
  };

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%",
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%",
            }}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center items-center mt-6 gap-2">
        {renderDots()}
      </div>
    </div>
  );
};

export default GallerySlider;


-------------------------------

import { useState, useEffect, useRef, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const desktopTotalSlides = galleryData.length;
  const mobileTotalSlides = flattenedImages.length;
  const currentViewTotalItems = isMobile
    ? mobileTotalSlides
    : desktopTotalSlides;

  const goToPrevSlideStable = useCallback(() => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  }, [currentViewTotalItems]);

  useEffect(() => {
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && currentViewTotalItems > 1) {
      clearAutoplayInterval();
      intervalRef.current = setInterval(goToPrevSlideStable, 5000);
    } else {
      clearAutoplayInterval();
    }
    return () => clearAutoplayInterval();
  }, [isPaused, currentViewTotalItems, goToPrevSlideStable]);

  const goToSlide = (slideIndex: number) => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = currentViewTotalItems - 1;
    if (newIndex >= currentViewTotalItems) newIndex = 0;

    if (newIndex > currentIndex) {
      if (currentIndex === 0 && newIndex === currentViewTotalItems - 1) {
        setDirection("prev");
      } else {
        setDirection("next");
      }
    } else if (newIndex < currentIndex) {
      if (currentIndex === currentViewTotalItems - 1 && newIndex === 0) {
        setDirection("next");
      } else {
        setDirection("prev");
      }
    }
    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex(
      (prev) => (prev + 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }
    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null;
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null;

    return (
      <div className="grid grid-cols-3 gap-4">
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  const renderDots = () => {
    const dots = [];
    const maxMobileDots = 7;

    if (isMobile && mobileTotalSlides > maxMobileDots) {
      const halfMaxDots = Math.floor(maxMobileDots / 2);
      let start = Math.max(0, currentIndex - halfMaxDots);
      let end = Math.min(mobileTotalSlides - 1, start + maxMobileDots - 1);

      if (end - start + 1 < maxMobileDots) {
        start = Math.max(0, end - maxMobileDots + 1);
      }

      if (start > 0) {
        dots.push(
          <button
            key="start-ellipsis"
            onClick={() => goToSlide(Math.max(0, currentIndex - maxMobileDots))}
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.previousPages")}
          >
            ...
          </button>
        );
      }

      for (let i = start; i <= end; i++) {
        dots.push(
          <button
            key={`dot-mobile-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }

      if (end < mobileTotalSlides - 1) {
        dots.push(
          <button
            key="end-ellipsis"
            onClick={() =>
              goToSlide(
                Math.min(mobileTotalSlides - 1, currentIndex + maxMobileDots)
              )
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.nextPages")}
          >
            ...
          </button>
        );
      }
    } else {
      const itemsToIterate = currentViewTotalItems;
      for (let i = 0; i < itemsToIterate; i++) {
        dots.push(
          <button
            key={`dot-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }
    }
    return dots;
  };

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%",
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%",
            }}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center items-center mt-6 gap-2">
        {renderDots()}
      </div>
    </div>
  );
};

export default GallerySlider;

---------------------------

import { useState, useEffect, useRef, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next"); // Domyślnie "next" dla pierwszego renderu
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const desktopTotalSlides = galleryData.length;
  const mobileTotalSlides = flattenedImages.length;
  const currentViewTotalItems = isMobile
    ? mobileTotalSlides
    : desktopTotalSlides;

  const goToNextSlideStable = useCallback(() => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  }, [currentViewTotalItems]);

  useEffect(() => {
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && currentViewTotalItems > 1) {
      clearAutoplayInterval();
      intervalRef.current = setInterval(goToNextSlideStable, 5000);
    } else {
      clearAutoplayInterval();
    }
    return () => clearAutoplayInterval();
  }, [isPaused, currentViewTotalItems, goToNextSlideStable]);

  const goToSlide = (slideIndex: number, newDirection?: "next" | "prev") => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = currentViewTotalItems - 1;
    if (newIndex >= currentViewTotalItems) newIndex = 0;

    if (newDirection) {
      setDirection(newDirection);
    } else {
      if (newIndex > currentIndex) {
        if (currentIndex === 0 && newIndex === currentViewTotalItems - 1) {
          setDirection("prev");
        } else {
          setDirection("next");
        }
      } else if (newIndex < currentIndex) {
        if (currentIndex === currentViewTotalItems - 1 && newIndex === 0) {
          setDirection("next");
        } else {
          setDirection("prev");
        }
      }
    }
    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }
    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null;
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null;

    return (
      <div className="grid grid-cols-3 gap-4">
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  const renderDots = () => {
    const dots = [];
    const maxVisibleDots = 7;

    if (isMobile && mobileTotalSlides > maxVisibleDots) {
      const halfVisible = Math.floor(maxVisibleDots / 2);
      let startDot = Math.max(0, currentIndex - halfVisible);
      let endDot = Math.min(
        mobileTotalSlides - 1,
        startDot + maxVisibleDots - 1
      );

      if (endDot - startDot + 1 < maxVisibleDots) {
        startDot = Math.max(0, endDot - maxVisibleDots + 1);
      }

      if (startDot > 0) {
        dots.push(
          <button
            key="start-ellipsis"
            onClick={() =>
              goToSlide(Math.max(0, currentIndex - maxVisibleDots), "prev")
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.previousPages")}
          >
            ...
          </button>
        );
      }

      for (let i = startDot; i <= endDot; i++) {
        dots.push(
          <button
            key={`dot-mobile-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }

      if (endDot < mobileTotalSlides - 1) {
        dots.push(
          <button
            key="end-ellipsis"
            onClick={() =>
              goToSlide(
                Math.min(mobileTotalSlides - 1, currentIndex + maxVisibleDots),
                "next"
              )
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.nextPages")}
          >
            ...
          </button>
        );
      }
    } else {
      const itemsToIterate = currentViewTotalItems;
      for (let i = 0; i < itemsToIterate; i++) {
        dots.push(
          <button
            key={`dot-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }
    }
    return dots;
  };

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%",
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%",
            }}
            custom={direction} // Dodanie custom prop do rozróżnienia wariantu
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-r-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 bg-accent text-white p-3 rounded-l-md opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center items-center mt-6 gap-2">
        {renderDots()}
      </div>
    </div>
  );
};

export default GallerySlider;


---------------------------------

{
  "common": {
    "backToHome": "Powrót do strony głównej"
  },
  "meta": {
    "title": "Salon Fryzjerski AGILERA | Styl Klasa Precyzja",
    "description": "Profesjonalny salon fryzjerski damsko-męski AGILERA oferujący strzyżenie, stylizację i koloryzację w eleganckim wydaniu.",
    "ogTitle": "Salon Fryzjerski AGILERA",
    "ogDescription": "Profesjonalny salon fryzjerski damsko-męski oferujący strzyżenie, stylizację i koloryzację w eleganckim wydaniu."
  },
  "accessibility": {
    "skipToContent": "Przejdź do treści",
    "toggleMenu": "Przełącz menu",
    "toggleTheme": "Przełącz tryb jasny/ciemny",
    "changeLanguage": "Zmień język",
    "previousSlide": "Poprzedni slajd",
    "nextSlide": "Następny slajd",
    "goToSlide": "Przejdź do slajdu {{number}}",
    "closeModal": "Zamknij okno"
  },
  "nav": {
    "home": "Start",
    "about": "O nas",
    "services": "Usługi",
    "gallery": "Galeria",
    "contact": "Kontakt"
  },
  "home": {
    "heroAlt": "Wnętrze salonu fryzjerskiego AGILERA",
    "motto": "Styl. Klasa. Precyzja.",
    "knowUs": "Poznaj nas",
    "bookAppointment": "Umów wizytę"
  },
  "about": {
    "title": "O Nas",
    "ourStory": "Nasza Historia",
    "storyParagraph2": "Salon Fryzjerski AGILERA to miejsce, gdzie pasja spotyka się z profesjonalizmem. Od 2010 roku zapewniamy najwyższej jakości usługi fryzjerskie dla klientów ceniących sobie elegancję i precyzję.",
    "storyParagraph3": "Nasz zespół to grupa doświadczonych stylistów, którzy nieustannie doskonalą swoje umiejętności, uczestnicząc w międzynarodowych szkoleniach i pokazach fryzjerskich.",
    "yearsExperience": "Lat doświadczenia",
    "happyClients": "Zadowolonych klientów",
    "industryAwards": "Nagród branżowych",
    "ourTeam": "Nasz Zespół",
    "mainStylist": "Główna Stylistka",
    "creativeStylist": "Stylista Kreatywny",
    "colorist": "Kolorystka",
    "barber": "Barber",
    "stylistWorkingImage": "Stylistka pracująca z klientką",
    "salonInteriorImage": "Wnętrze salonu AGILERA"
  },
  "services": {
    "title": "Nasze usługi",
    "haircut": "Strzyżenie",
    "styling": "Stylizacja",
    "coloring": "Koloryzacja",
    "learnMore": "Dowiedz się więcej",
    "bookAppointment": "Umów wizytę"
  },
  "gallery": {
    "title": "Galeria"
  },
  "contact": {
    "title": "Kontakt",
    "contactInfo": "Informacje kontaktowe",
    "address": "Adres",
    "addressDetails": "ul. Słowackiego 50, 26-604 Radom",
    "phone": "Telefon",
    "phoneNumber": "+48 600 774 450",
    "email": "Email",
    "emailAddress": "kontakt@agilera.pl",
    "openingHours": "Godziny otwarcia",
    "mondayFriday": "Poniedziałek - Piątek",
    "saturday": "Sobota",
    "sunday": "Niedziela",
    "closed": "Zamknięte",
    "writeToUs": "Napisz do nas",
    "nameLabel": "Imię i nazwisko",
    "emailLabel": "Email",
    "phoneLabel": "Telefon (opcjonalnie)",
    "messageLabel": "Wiadomość",
    "sendMessage": "Wyślij wiadomość",
    "sending": "Wysyłanie...",
    "nameRequired": "Imię i nazwisko jest wymagane",
    "validEmailRequired": "Proszę podać poprawny adres email",
    "messageRequired": "Wiadomość jest wymagana",
    "mapTitle": "Lokalizacja Salonu Fryzjerskiego AGILERA",
    "certifications": "Nasze certyfikaty",
    "premiumStylist": "Stylista Premium",
    "masterCertificate": "Certyfikat Mistrzowski",
    "colorExpert": "Ekspert Koloryzacji",
    "topRated": "Najwyżej Oceniany",
    "hairExpert": "Ekspert Fryzjerstwa",
    "certificationDescription": "Stawiamy na rozwój i jakość. Nasze certyfikaty to efekt pracy, pasji i ciągłych szkoleń.",
    "expertiseGuarantee": "Dzięki temu możesz liczyć na fachowe doradztwo, najnowsze techniki i indywidualne podejście. Twoje włosy są w dobrych, sprawdzonych rękach."
  },
  "footer": {
    "description": "Profesjonalny salon fryzjerski oferujący kompleksowe usługi dla kobiet i mężczyzn w eleganckiej atmosferze.",
    "quickLinks": "Szybki dostęp",
    "openingHours": "Godziny otwarcia",
    "monday": "Poniedziałek",
    "tuesday": "Wtorek",
    "wednesday": "Środa",
    "thursday": "Czwartek",
    "friday": "Piątek",
    "saturday": "Sobota",
    "sunday": "Niedziela",
    "closed": "Zamknięte",
    "newsletter": "Newsletter",
    "newsletterText": "Zapisz się, aby otrzymywać informacje o promocjach i nowościach.",
    "yourEmail": "Twój email",
    "subscribe": "Zapisz się",
    "copyright": "Salon Fryzjerski AGILERA. Wszelkie prawa zastrzeżone.",
    "privacyPolicy": "Polityka prywatności",
    "terms": "Regulamin"
  },
  "toast": {
    "success": "Sukces!",
    "error": "Błąd!",
    "messageSent": "Twoja wiadomość została wysłana. Dziękujemy!",
    "newsletterSuccess": "Dziękujemy za zapisanie się do newslettera!",
    "formErrors": "Proszę wypełnić wszystkie wymagane pola formularza.",
    "invalidEmail": "Proszę podać poprawny adres email."
  },
  "privacyPolicy": {
    "pageTitle": "Polityka Prywatności",
    "pageDescription": "Polityka Prywatności salonu fryzjerskiego AGILERA - dowiedz się, jak chronimy Twoje dane osobowe.",
    "title": "Polityka Prywatności",
    "lastUpdated": "Ostatnia aktualizacja",
    "section1": {
      "title": "Wprowadzenie",
      "content": "Niniejsza Polityka Prywatności opisuje, w jaki sposób Salon Fryzjerski AGILERA zbiera, wykorzystuje i chroni Twoje dane osobowe podczas korzystania z naszej strony internetowej oraz usług oferowanych w naszym salonie."
    },
    "section2": {
      "title": "Dane, które zbieramy",
      "content": "Podczas korzystania z naszej strony internetowej oraz usług, możemy zbierać następujące rodzaje danych osobowych:",
      "subsection1": {
        "title": "Dane podawane dobrowolnie",
        "content": "Dane kontaktowe (imię, nazwisko, adres e-mail, numer telefonu) - gdy wypełniasz formularz kontaktowy, zapisujesz się do newslettera lub umawiasz wizytę w naszym salonie."
      },
      "subsection2": {
        "title": "Dane zbierane automatycznie",
        "content": "Informacje o urządzeniu i przeglądarce, adres IP, informacje o plikach cookie oraz dane analityczne dotyczące korzystania z naszej strony internetowej."
      }
    },
    "section3": {
      "title": "Cel przetwarzania danych",
      "content": "Twoje dane osobowe są zbierane i przetwarzane w celu: udzielenia odpowiedzi na zapytania przesłane za pomocą formularza kontaktowego, realizacji usług fryzjerskich, wysyłania informacji marketingowych (jeśli wyraziłeś na to zgodę), poprawy jakości naszej strony internetowej oraz usług, oraz wypełnienia obowiązków prawnych."
    },
    "section4": {
      "title": "Udostępnianie danych",
      "content": "Nie sprzedajemy ani nie udostępniamy Twoich danych osobowych stronom trzecim, z wyjątkiem sytuacji, gdy jest to niezbędne do realizacji usług (np. dostawcy usług płatniczych, systemy rezerwacji online) lub gdy jesteśmy do tego zobowiązani przez prawo."
    },
    "section5": {
      "title": "Twoje prawa",
      "content": "Zgodnie z RODO, masz prawo do: dostępu do swoich danych osobowych, ich sprostowania, usunięcia lub ograniczenia przetwarzania, przenoszenia danych, wniesienia sprzeciwu wobec przetwarzania danych oraz cofnięcia zgody na przetwarzanie danych w dowolnym momencie. W celu skorzystania z tych praw, prosimy o kontakt z nami."
    },
    "contact": {
      "title": "Kontakt w sprawie danych osobowych",
      "content": "W przypadku pytań dotyczących naszej Polityki Prywatności lub przetwarzania Twoich danych osobowych, prosimy o kontakt:"
    }
  },
  "terms": {
    "pageTitle": "Regulamin",
    "pageDescription": "Regulamin salonu fryzjerskiego AGILERA - zasady korzystania z naszych usług i strony internetowej.",
    "title": "Regulamin",
    "lastUpdated": "Ostatnia aktualizacja",
    "section1": {
      "title": "Postanowienia ogólne",
      "content": "Niniejszy Regulamin określa zasady korzystania z usług Salonu Fryzjerskiego AGILERA oraz ze strony internetowej agilera.pl."
    },
    "section2": {
      "title": "Definicje",
      "content": "Salon - Salon Fryzjerski AGILERA z siedzibą w Warszawie, przy ul. Przykładowej 123. Klient - osoba fizyczna korzystająca z usług Salonu. Strona internetowa - witryna internetowa dostępna pod adresem agilera.pl. Usługi - usługi fryzjerskie świadczone przez Salon."
    },
    "section3": {
      "title": "Zasady rezerwacji i anulowania wizyt",
      "content": "Rezerwacji wizyty można dokonać telefonicznie, osobiście w Salonie lub poprzez system rezerwacji online dostępny na naszej stronie internetowej.",
      "subsection1": {
        "title": "Rezerwacja",
        "content": "Podczas rezerwacji należy podać imię, nazwisko oraz numer telefonu. Rezerwacja jest ważna po otrzymaniu potwierdzenia od pracownika Salonu."
      },
      "subsection2": {
        "title": "Anulowanie i zmiana terminu",
        "content": "Anulowania lub zmiany terminu wizyty można dokonać najpóźniej 24 godziny przed planowaną wizytą. W przypadku nieodwołania wizyty i niestawienia się na umówiony termin, Salon zastrzega sobie prawo do zablokowania możliwości rezerwacji online na okres 30 dni."
      }
    },
    "section4": {
      "title": "Cennik usług",
      "content": "Ceny usług fryzjerskich są dostępne w Salonie oraz na naszej stronie internetowej. Ceny mogą ulec zmianie, o czym Klienci będą informowani z odpowiednim wyprzedzeniem. Ostateczna cena usługi może różnić się od ceny podanej w cenniku, w zależności od długości, gęstości włosów oraz użytych produktów."
    },
    "section5": {
      "title": "Reklamacje",
      "content": "Wszelkie reklamacje dotyczące wykonanych usług należy zgłaszać bezpośrednio po wykonaniu usługi lub najpóźniej w ciągu 3 dni od daty wizyty. Reklamacje można składać osobiście w Salonie, telefonicznie lub drogą elektroniczną na adres e-mail: kontakt@agilera.pl. Reklamacje będą rozpatrywane indywidualnie w terminie 14 dni od daty zgłoszenia."
    },
    "section6": {
      "title": "Postanowienia końcowe",
      "content": "Salon zastrzega sobie prawo do zmiany niniejszego Regulaminu. Zmiany wchodzą w życie z dniem ich opublikowania na stronie internetowej. W sprawach nieuregulowanych niniejszym Regulaminem zastosowanie mają przepisy prawa polskiego."
    },
    "contact": {
      "title": "Kontakt",
      "content": "W przypadku pytań dotyczących naszego Regulaminu, prosimy o kontakt:"
    }
  }
}


-----------------------------------

{
  "common": {
    "backToHome": "Back to Home"
  },
  "meta": {
    "title": "AGILERA Hair Salon | Style Class Precision",
    "description": "Professional hair salon for women and men, AGILERA offers cutting, styling, and coloring in an elegant setting.",
    "ogTitle": "AGILERA Hair Salon",
    "ogDescription": "Professional hair salon for women and men offering cutting, styling, and coloring in an elegant setting."
  },
  "accessibility": {
    "skipToContent": "Skip to content",
    "toggleMenu": "Toggle menu",
    "toggleTheme": "Toggle light/dark mode",
    "changeLanguage": "Change language",
    "previousSlide": "Previous slide",
    "nextSlide": "Next slide",
    "goToSlide": "Go to slide {{number}}",
    "closeModal": "Close modal"
  },
  "nav": {
    "home": "Home",
    "about": "About",
    "services": "Services",
    "gallery": "Gallery",
    "contact": "Contact"
  },
  "home": {
    "heroAlt": "AGILERA hair salon interior",
    "motto": "Style. Class. Precision.",
    "knowUs": "About Us",
    "bookAppointment": "Book Appointment"
  },
  "about": {
    "title": "About Us",
    "ourStory": "Our Story",
    "storyParagraph2": "AGILERA Hair Salon is a place where passion meets professionalism. Since 2010, we have been providing top-quality hairdressing services for clients who value elegance and precision.",
    "storyParagraph3": "Our team is a group of experienced stylists who continuously improve their skills by participating in international training sessions and hairdressing shows.",
    "yearsExperience": "Years of experience",
    "happyClients": "Happy clients",
    "industryAwards": "Industry awards",
    "ourTeam": "Our Team",
    "mainStylist": "Head Stylist",
    "creativeStylist": "Creative Stylist",
    "colorist": "Colorist",
    "barber": "Barber",
    "stylistWorkingImage": "Stylist working with client",
    "salonInteriorImage": "AGILERA salon interior"
  },
  "services": {
    "title": "Our Services",
    "haircut": "Haircuts",
    "styling": "Styling",
    "coloring": "Coloring",
    "learnMore": "Learn more",
    "bookAppointment": "Book Appointment",
    "bookAppointment": "Book Appointment"
  },
  "gallery": {
    "title": "Gallery"
  },
  "contact": {
    "title": "Contact",
    "contactInfo": "Contact Information",
    "address": "Address",
    "addressDetails": "50 Słowackiego Street, 26-604 Radom",
    "phone": "Phone",
    "phoneNumber": "+48 123 456 789",
    "email": "Email",
    "emailAddress": "contact@agilera.pl",
    "openingHours": "Opening Hours",
    "mondayFriday": "Monday - Friday",
    "saturday": "Saturday",
    "sunday": "Sunday",
    "closed": "Closed",
    "writeToUs": "Write to Us",
    "nameLabel": "Full Name",
    "emailLabel": "Email",
    "phoneLabel": "Phone (optional)",
    "messageLabel": "Message",
    "sendMessage": "Send Message",
    "sending": "Sending...",
    "nameRequired": "Full name is required",
    "validEmailRequired": "Please enter a valid email address",
    "messageRequired": "Message is required",
    "mapTitle": "AGILERA Hair Salon Location",
    "certifications": "Our Certifications",
    "premiumStylist": "Premium Stylist",
    "masterCertificate": "Master Certificate",
    "colorExpert": "Color Expert",
    "topRated": "Top Rated",
    "hairExpert": "Hair Expert",
    "certificationDescription": "We focus on development and quality. Our certificates are the result of work, passion and continuous training.",
    "expertiseGuarantee": "Thanks to this, you can count on professional advice, the latest techniques and individual approach. Your hair is in good, proven hands."
  },
  "footer": {
    "description": "Professional hair salon offering comprehensive services for women and men in an elegant atmosphere.",
    "quickLinks": "Quick Links",
    "openingHours": "Opening Hours",
    "monday": "Monday",
    "tuesday": "Tuesday",
    "wednesday": "Wednesday",
    "thursday": "Thursday",
    "friday": "Friday",
    "saturday": "Saturday",
    "sunday": "Sunday",
    "closed": "Closed",
    "newsletter": "Newsletter",
    "newsletterText": "Subscribe to receive information about promotions and news.",
    "yourEmail": "Your email",
    "subscribe": "Subscribe",
    "copyright": "AGILERA Hair Salon. All rights reserved.",
    "privacyPolicy": "Privacy Policy",
    "terms": "Terms & Conditions"
  },
  "toast": {
    "success": "Success!",
    "error": "Error!",
    "messageSent": "Your message has been sent. Thank you!",
    "newsletterSuccess": "Thank you for subscribing to our newsletter!",
    "formErrors": "Please fill in all required form fields.",
    "invalidEmail": "Please enter a valid email address."
  },
  "privacyPolicy": {
    "pageTitle": "Privacy Policy",
    "pageDescription": "Privacy Policy of AGILERA Hair Salon - learn how we protect your personal data.",
    "title": "Privacy Policy",
    "lastUpdated": "Last updated",
    "section1": {
      "title": "Introduction",
      "content": "This Privacy Policy describes how AGILERA Hair Salon collects, uses, and protects your personal data when you use our website and services offered at our salon."
    },
    "section2": {
      "title": "Data We Collect",
      "content": "When using our website and services, we may collect the following types of personal data:",
      "subsection1": {
        "title": "Data Provided Voluntarily",
        "content": "Contact information (name, email address, phone number) - when you fill out a contact form, subscribe to our newsletter, or book an appointment at our salon."
      },
      "subsection2": {
        "title": "Automatically Collected Data",
        "content": "Information about your device and browser, IP address, cookie information, and analytical data regarding the use of our website."
      }
    },
    "section3": {
      "title": "Purpose of Data Processing",
      "content": "Your personal data is collected and processed for the purpose of: responding to inquiries submitted via the contact form, providing hairdressing services, sending marketing information (if you have consented to it), improving the quality of our website and services, and fulfilling legal obligations."
    },
    "section4": {
      "title": "Data Sharing",
      "content": "We do not sell or share your personal data with third parties, except when it is necessary to provide services (e.g., payment service providers, online booking systems) or when we are required to do so by law."
    },
    "section5": {
      "title": "Your Rights",
      "content": "In accordance with GDPR, you have the right to: access your personal data, rectify it, delete it or limit its processing, data portability, object to data processing, and withdraw consent for data processing at any time. To exercise these rights, please contact us."
    },
    "contact": {
      "title": "Contact Regarding Personal Data",
      "content": "If you have questions about our Privacy Policy or the processing of your personal data, please contact us:"
    }
  },
  "terms": {
    "pageTitle": "Terms & Conditions",
    "pageDescription": "Terms and Conditions of AGILERA Hair Salon - rules for using our services and website.",
    "title": "Terms & Conditions",
    "lastUpdated": "Last updated",
    "section1": {
      "title": "General Provisions",
      "content": "These Terms and Conditions govern the use of AGILERA Hair Salon services and the website agilera.pl."
    },
    "section2": {
      "title": "Definitions",
      "content": "Salon - AGILERA Hair Salon located in Warsaw at 123 Example Street. Client - a natural person using the Salon's services. Website - the website available at agilera.pl. Services - hairdressing services provided by the Salon."
    },
    "section3": {
      "title": "Appointment Booking and Cancellation Rules",
      "content": "Appointments can be booked by phone, in person at the Salon, or through the online booking system available on our website.",
      "subsection1": {
        "title": "Booking",
        "content": "When booking, you need to provide your name, surname, and phone number. The booking is valid after receiving confirmation from a Salon employee."
      },
      "subsection2": {
        "title": "Cancellation and Rescheduling",
        "content": "Appointments can be cancelled or rescheduled no later than 24 hours before the scheduled appointment. In case of not cancelling an appointment and not showing up at the scheduled time, the Salon reserves the right to block the possibility of online booking for a period of 30 days."
      }
    },
    "section4": {
      "title": "Service Pricing",
      "content": "Prices for hairdressing services are available at the Salon and on our website. Prices may change, and Clients will be informed about such changes in advance. The final price of a service may differ from the price listed in the price list, depending on the length, density of hair, and products used."
    },
    "section5": {
      "title": "Complaints",
      "content": "Any complaints regarding the services provided should be reported immediately after the service is performed or no later than 3 days from the date of the visit. Complaints can be submitted in person at the Salon, by phone, or electronically to the email address: contact@agilera.pl. Complaints will be considered individually within 14 days from the date of submission."
    },
    "section6": {
      "title": "Final Provisions",
      "content": "The Salon reserves the right to change these Terms and Conditions. Changes come into effect on the day of their publication on the website. In matters not regulated by these Terms and Conditions, the provisions of Polish law shall apply."
    },
    "contact": {
      "title": "Contact",
      "content": "If you have questions about our Terms and Conditions, please contact us:"
    }
  }
}


----------------------------------

import { useState, useEffect, useRef, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const desktopTotalSlides = galleryData.length;
  const mobileTotalSlides = flattenedImages.length;
  const currentViewTotalItems = isMobile
    ? mobileTotalSlides
    : desktopTotalSlides;

  const goToNextSlideStable = useCallback(() => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  }, [currentViewTotalItems]);

  useEffect(() => {
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && currentViewTotalItems > 1) {
      clearAutoplayInterval();
      intervalRef.current = setInterval(goToNextSlideStable, 5000);
    } else {
      clearAutoplayInterval();
    }
    return () => clearAutoplayInterval();
  }, [isPaused, currentViewTotalItems, goToNextSlideStable]);

  const goToSlide = (slideIndex: number, newDirection?: "next" | "prev") => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = currentViewTotalItems - 1;
    if (newIndex >= currentViewTotalItems) newIndex = 0;

    if (newDirection) {
      setDirection(newDirection);
    } else {
      if (newIndex > currentIndex) {
        if (currentIndex === 0 && newIndex === currentViewTotalItems - 1) {
          setDirection("prev");
        } else {
          setDirection("next");
        }
      } else if (newIndex < currentIndex) {
        if (currentIndex === currentViewTotalItems - 1 && newIndex === 0) {
          setDirection("next");
        } else {
          setDirection("prev");
        }
      }
    }
    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }
    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null;
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null;

    return (
      <div className="grid grid-cols-3 gap-4">
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full min-h-[200px] md:min-h-[250px] lg:min-h-[300px] object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  const renderDots = () => {
    const dots = [];
    const maxVisibleDots = 7;

    if (isMobile && mobileTotalSlides > maxVisibleDots) {
      const halfVisible = Math.floor(maxVisibleDots / 2);
      let calculatedStartDot = currentIndex - halfVisible;
      let calculatedEndDot = currentIndex + halfVisible;

      if (calculatedStartDot < 0) {
        calculatedStartDot = 0;
        calculatedEndDot = Math.min(mobileTotalSlides - 1, maxVisibleDots - 1);
      }

      if (calculatedEndDot >= mobileTotalSlides) {
        calculatedEndDot = mobileTotalSlides - 1;
        calculatedStartDot = Math.max(0, mobileTotalSlides - maxVisibleDots);
      }

      if (
        calculatedEndDot - calculatedStartDot + 1 < maxVisibleDots &&
        mobileTotalSlides >= maxVisibleDots
      ) {
        if (currentIndex < halfVisible) {
          calculatedEndDot = Math.min(
            mobileTotalSlides - 1,
            calculatedStartDot + maxVisibleDots - 1
          );
        } else if (currentIndex > mobileTotalSlides - 1 - halfVisible) {
          calculatedStartDot = Math.max(
            0,
            calculatedEndDot - maxVisibleDots + 1
          );
        }
      }

      if (calculatedStartDot > 0) {
        dots.push(
          <button
            key="start-ellipsis"
            onClick={() =>
              goToSlide(Math.max(0, currentIndex - maxVisibleDots), "prev")
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.previousPages")}
          >
            ...
          </button>
        );
      }

      for (let i = calculatedStartDot; i <= calculatedEndDot; i++) {
        dots.push(
          <button
            key={`dot-mobile-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }

      if (calculatedEndDot < mobileTotalSlides - 1) {
        dots.push(
          <button
            key="end-ellipsis"
            onClick={() =>
              goToSlide(
                Math.min(mobileTotalSlides - 1, currentIndex + maxVisibleDots),
                "next"
              )
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.nextPages")}
          >
            ...
          </button>
        );
      }
    } else {
      const itemsToIterate = currentViewTotalItems;
      for (let i = 0; i < itemsToIterate; i++) {
        dots.push(
          <button
            key={`dot-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }
    }
    return dots;
  };

  return (
    <div
      className={`relative ${
        isMobile ? "min-h-[calc(24rem+50px)]" : "min-h-[calc(300px+50px)]"
      } md:min-h-[calc(350px+50px)] lg:min-h-[calc(400px+50px)]`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div
        ref={sliderRef}
        className="overflow-hidden"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%",
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%",
            }}
            custom={direction}
            transition={{ duration: 0.5 }}
            className="px-4"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 -translate-x-0 md:-translate-x-1/2 bg-accent text-white p-3 rounded-r-md md:rounded-full opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 translate-x-0 md:translate-x-1/2 bg-accent text-white p-3 rounded-l-md md:rounded-full opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center items-center mt-6 gap-2">
        {renderDots()}
      </div>
    </div>
  );
};

export default GallerySlider;


------------------------------

import { useState, useEffect, useRef, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { motion, AnimatePresence } from "framer-motion";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useGalleryModal } from "@/context/GalleryContext";
import { galleryData } from "@/data/galleryData";
import { useIsMobile } from "@/hooks/use-mobile";

const GallerySlider = () => {
  const { t } = useTranslation();
  const { openGalleryModal } = useGalleryModal();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);
  const [direction, setDirection] = useState<"next" | "prev">("next");
  const sliderRef = useRef<HTMLDivElement>(null);
  const isMobile = useIsMobile();
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const flattenedImages = galleryData.flatMap((slide) => slide.images);
  const desktopTotalSlides = galleryData.length;
  const mobileTotalSlides = flattenedImages.length;
  const currentViewTotalItems = isMobile
    ? mobileTotalSlides
    : desktopTotalSlides;

  const goToNextSlideStable = useCallback(() => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  }, [currentViewTotalItems]);

  useEffect(() => {
    const clearAutoplayInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };

    if (!isPaused && currentViewTotalItems > 1) {
      clearAutoplayInterval();
      intervalRef.current = setInterval(goToNextSlideStable, 5000);
    } else {
      clearAutoplayInterval();
    }
    return () => clearAutoplayInterval();
  }, [isPaused, currentViewTotalItems, goToNextSlideStable]);

  const goToSlide = (slideIndex: number, newDirection?: "next" | "prev") => {
    let newIndex = slideIndex;
    if (newIndex < 0) newIndex = currentViewTotalItems - 1;
    if (newIndex >= currentViewTotalItems) newIndex = 0;

    if (newDirection) {
      setDirection(newDirection);
    } else {
      if (newIndex > currentIndex) {
        if (currentIndex === 0 && newIndex === currentViewTotalItems - 1) {
          setDirection("prev");
        } else {
          setDirection("next");
        }
      } else if (newIndex < currentIndex) {
        if (currentIndex === currentViewTotalItems - 1 && newIndex === 0) {
          setDirection("next");
        } else {
          setDirection("prev");
        }
      }
    }
    setCurrentIndex(newIndex);
  };

  const goToPrevSlide = () => {
    setDirection("prev");
    setCurrentIndex(
      (prev) => (prev - 1 + currentViewTotalItems) % currentViewTotalItems
    );
  };

  const goToNextSlide = () => {
    setDirection("next");
    setCurrentIndex((prev) => (prev + 1) % currentViewTotalItems);
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const handleTouchEnd = () => {
    if (touchStart - touchEnd > 50) {
      goToNextSlide();
    }
    if (touchStart - touchEnd < -50) {
      goToPrevSlide();
    }
  };

  const handleImageClick = (imageData: {
    src: string;
    fullSrc?: string;
    alt: string;
  }) => {
    openGalleryModal(imageData.fullSrc || imageData.src, imageData.alt);
  };

  const renderContent = () => {
    if (isMobile) {
      const currentImage = flattenedImages[currentIndex];
      if (!currentImage) return null;
      return (
        <div className="w-full">
          <div
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md"
            onClick={() => handleImageClick(currentImage)}
          >
            <img
              src={currentImage.src}
              alt={currentImage.alt}
              className="w-full h-96 object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        </div>
      );
    }

    const currentSlideData = galleryData[currentIndex];
    if (!currentSlideData || !currentSlideData.images) return null;

    const desktopGridHeight = "h-[450px]"; // Zwiększona wysokość, DOSTOSUJ W RAZIE POTRZEBY

    return (
      <div className={`grid grid-cols-3 gap-4 ${desktopGridHeight}`}>
        {currentSlideData.images.map((image, index) => (
          <div
            key={`image-${currentIndex}-${index}`}
            className="gallery-item cursor-pointer overflow-hidden rounded-md shadow-md h-full"
            onClick={() => handleImageClick(image)}
          >
            <img
              src={image.src}
              alt={image.alt}
              className="w-full h-full object-cover transition duration-300 ease-in-out hover:scale-105"
              loading="lazy"
            />
          </div>
        ))}
      </div>
    );
  };

  const handleMouseEnter = () => {
    setIsPaused(true);
  };

  const handleMouseLeave = () => {
    setIsPaused(false);
  };

  const renderDots = () => {
    const dots = [];
    const maxVisibleDots = 7;

    if (isMobile && mobileTotalSlides > maxVisibleDots) {
      const halfVisible = Math.floor(maxVisibleDots / 2);
      let calculatedStartDot = currentIndex - halfVisible;
      let calculatedEndDot = currentIndex + halfVisible;

      if (calculatedStartDot < 0) {
        calculatedStartDot = 0;
        calculatedEndDot = Math.min(mobileTotalSlides - 1, maxVisibleDots - 1);
      }

      if (calculatedEndDot >= mobileTotalSlides) {
        calculatedEndDot = mobileTotalSlides - 1;
        calculatedStartDot = Math.max(0, mobileTotalSlides - maxVisibleDots);
      }

      if (
        calculatedEndDot - calculatedStartDot + 1 < maxVisibleDots &&
        mobileTotalSlides >= maxVisibleDots
      ) {
        if (currentIndex < halfVisible) {
          calculatedEndDot = Math.min(
            mobileTotalSlides - 1,
            calculatedStartDot + maxVisibleDots - 1
          );
        } else if (currentIndex > mobileTotalSlides - 1 - halfVisible) {
          calculatedStartDot = Math.max(
            0,
            calculatedEndDot - maxVisibleDots + 1
          );
        }
      }

      if (calculatedStartDot > 0) {
        dots.push(
          <button
            key="start-ellipsis"
            onClick={() =>
              goToSlide(Math.max(0, currentIndex - maxVisibleDots), "prev")
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.previousPages")}
          >
            ...
          </button>
        );
      }

      for (let i = calculatedStartDot; i <= calculatedEndDot; i++) {
        dots.push(
          <button
            key={`dot-mobile-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }

      if (calculatedEndDot < mobileTotalSlides - 1) {
        dots.push(
          <button
            key="end-ellipsis"
            onClick={() =>
              goToSlide(
                Math.min(mobileTotalSlides - 1, currentIndex + maxVisibleDots),
                "next"
              )
            }
            className="text-neutral dark:text-gray-600 mx-1 px-1"
            aria-label={t("accessibility.nextPages")}
          >
            ...
          </button>
        );
      }
    } else {
      const itemsToIterate = currentViewTotalItems;
      for (let i = 0; i < itemsToIterate; i++) {
        dots.push(
          <button
            key={`dot-${i}`}
            onClick={() => goToSlide(i)}
            className={`w-3 h-3 rounded-full transition duration-300 ease-in-out ${
              currentIndex === i
                ? "bg-accent"
                : "bg-neutral dark:bg-gray-600 hover:bg-accent dark:hover:bg-accent"
            }`}
            aria-label={t("accessibility.goToSlide", { number: i + 1 })}
          />
        );
      }
    }
    return dots;
  };

  const spaceForDotsAndMarginPx = 56; // ok. 3.5rem (56px) - DOSTOSUJ W RAZIE POTRZEBY
  const desktopGridHeightPx = 450; // Musi odpowiadać wartości z Tailwind `h-[450px]`

  const mobileContainerMinHeight = `min-h-[calc(24rem+${spaceForDotsAndMarginPx}px)]`;
  const desktopContainerMinHeight = `min-h-[calc(${desktopGridHeightPx}px+${spaceForDotsAndMarginPx}px)]`;
  // Jeśli potrzebujesz bardziej responsywnych wysokości dla desktopu, np.:
  // const desktopResponsiveMinHeights = "md:min-h-[calc(400px+56px)] lg:min-h-[calc(450px+56px)]";
  // I wtedy w className: ${isMobile ? mobileContainerMinHeight : desktopResponsiveMinHeights}

  return (
    <div
      className={`relative ${
        isMobile ? mobileContainerMinHeight : desktopContainerMinHeight
      }`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div
        ref={sliderRef}
        className="overflow-hidden h-full"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={currentIndex}
            initial={{
              opacity: 0,
              x: direction === "next" ? "100%" : "-100%",
            }}
            animate={{ opacity: 1, x: "0%" }}
            exit={{
              opacity: 0,
              x: direction === "next" ? "-100%" : "100%",
            }}
            custom={direction}
            transition={{ duration: 0.5 }}
            className="px-4 h-full"
          >
            {renderContent()}
          </motion.div>
        </AnimatePresence>
      </div>

      <button
        onClick={goToPrevSlide}
        className="absolute top-1/2 left-0 transform -translate-y-1/2 -translate-x-0 md:-translate-x-1/2 bg-accent text-white p-3 rounded-r-md md:rounded-full opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.previousSlide")}
      >
        <FaChevronLeft />
      </button>

      <button
        onClick={goToNextSlide}
        className="absolute top-1/2 right-0 transform -translate-y-1/2 translate-x-0 md:translate-x-1/2 bg-accent text-white p-3 rounded-l-md md:rounded-full opacity-70 hover:opacity-100 transition duration-300 ease-in-out z-10"
        aria-label={t("accessibility.nextSlide")}
      >
        <FaChevronRight />
      </button>

      <div className="flex justify-center items-center mt-6 gap-2">
        {renderDots()}
      </div>
    </div>
  );
};

export default GallerySlider;
